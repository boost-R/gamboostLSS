
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gamboostLSS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "gamboostLSS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('gamboostLSS')
Loading required package: mboost
Loading required package: parallel
Loading required package: stabs

Attaching package: 'gamboostLSS'

The following object is masked from 'package:stats':

    model.weights

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.families")
> ### * as.families
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.families
> ### Title: Include 'gamlss' families in the boosting framework of
> ###   'gamboostLSS'
> ### Aliases: as.families gamlss.Families gamlss1parMu gamlss2parMu
> ###   gamlss2parSigma gamlss3parMu gamlss3parSigma gamlss3parNu
> ###   gamlss4parMu gamlss4parSigma gamlss4parNu gamlss4parTau
> ### Keywords: models distributions
> 
> ### ** Examples
> 
> ## simulate small example
> set.seed(123)
> x <- runif(1000)
> 
> y <- rnorm(mean = 2 + 3 * x,        # effect on mu
+            sd   = exp( 1 - 1 * x ), # effect on sigma
+            n    = 1000)
> 
> ## boosting
> glmss <- glmboostLSS(y ~ x, families = as.families("NO"))
> ## the same:
> if (require("gamlss.dist")) {
+     glmss <- glmboostLSS(y ~ x, families = as.families(NO))
+     glmss <- glmboostLSS(y ~ x, families = as.families(NO()))
+ }
Loading required package: gamlss.dist

Attaching package: 'gamlss.dist'

The following object is masked from 'package:mboost':

    Family

> 
> coef(glmss, off2int = TRUE)
$mu
(Intercept)           x 
   2.114767    2.824394 

$sigma
(Intercept)           x 
   1.031368   -1.062068 

> 
> ## compare to gamlss
> library(gamlss)
Loading required package: splines
Loading required package: gamlss.data

Attaching package: 'gamlss.data'

The following object is masked from 'package:datasets':

    sleep

Loading required package: nlme
 **********   GAMLSS Version 5.4-22  ********** 
For more on GAMLSS look at https://www.gamlss.com/
Type gamlssNews() to see new features/changes/bug fixes.

> glmss2 <- gamlss(y ~ x, sigma.formula = ~x, family = "NO")
GAMLSS-RS iteration 1: Global Deviance = 3844.26 
GAMLSS-RS iteration 2: Global Deviance = 3844.149 
GAMLSS-RS iteration 3: Global Deviance = 3844.149 
> coef(glmss2)
(Intercept)           x 
   2.110191    2.845264 
> glmss2$sigma.coef
(Intercept)           x 
   1.031275   -1.062060 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.families", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:gamlss', 'package:nlme', 'package:gamlss.data',
  'package:splines', 'package:gamlss.dist'

> nameEx("cvrisk")
> ### * cvrisk
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cvrisk.mboostLSS
> ### Title: Cross-Validation
> ### Aliases: cvrisk cvrisk.mboostLSS cvrisk.nc_mboostLSS make.grid
> ###   plot.cvriskLSS plot.nc_cvriskLSS
> ### Keywords: models regression
> 
> ### ** Examples
> 
> ## Data generating process:
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 +1 * x1 +0.5 * x2 -0.5 * x3 -1 * x4)
> sigma <- exp(-0.4 * x3 -0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ## linear model with y ~ . for both components: 100 boosting iterations
> model <- glmboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 100),
+                      center = TRUE)
> 
> ## set up a grid
> grid <-  make.grid(mstop(model), length.out = 5, dense_mu_grid = FALSE)
> plot(grid)
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### a tiny toy example (5-fold bootsrap with maximum stopping value 100)
> ## (to run it on multiple cores of a Linux or Mac OS computer remove
> ##  set papply = mclapply (default) and set mc.nodes to the
> ##  appropriate number of nodes)
> cvr <- cvrisk(model, folds = cv(model.weights(model), B = 5),
+               papply = lapply, grid = grid)
Starting cross-validation...
[fold]	[current mstop]
 [1]	[1,1]
 [1]	[3,1]
 [1]	[10,1]
 [1]	[32,1]
 [1]	[100,1]
 [1]	[1,3]
 [1]	[3,3]
 [1]	[10,3]
 [1]	[32,3]
 [1]	[100,3]
 [1]	[1,10]
 [1]	[3,10]
 [1]	[10,10]
 [1]	[32,10]
 [1]	[100,10]
 [1]	[1,32]
 [1]	[3,32]
 [1]	[10,32]
 [1]	[32,32]
 [1]	[100,32]
 [1]	[1,100]
 [1]	[3,100]
 [1]	[10,100]
 [1]	[32,100]
 [1]	[100,100]
 [2]	[1,1]
 [2]	[3,1]
 [2]	[10,1]
 [2]	[32,1]
 [2]	[100,1]
 [2]	[1,3]
 [2]	[3,3]
 [2]	[10,3]
 [2]	[32,3]
 [2]	[100,3]
 [2]	[1,10]
 [2]	[3,10]
 [2]	[10,10]
 [2]	[32,10]
 [2]	[100,10]
 [2]	[1,32]
 [2]	[3,32]
 [2]	[10,32]
 [2]	[32,32]
 [2]	[100,32]
 [2]	[1,100]
 [2]	[3,100]
 [2]	[10,100]
 [2]	[32,100]
 [2]	[100,100]
 [3]	[1,1]
 [3]	[3,1]
 [3]	[10,1]
 [3]	[32,1]
 [3]	[100,1]
 [3]	[1,3]
 [3]	[3,3]
 [3]	[10,3]
 [3]	[32,3]
 [3]	[100,3]
 [3]	[1,10]
 [3]	[3,10]
 [3]	[10,10]
 [3]	[32,10]
 [3]	[100,10]
 [3]	[1,32]
 [3]	[3,32]
 [3]	[10,32]
 [3]	[32,32]
 [3]	[100,32]
 [3]	[1,100]
 [3]	[3,100]
 [3]	[10,100]
 [3]	[32,100]
 [3]	[100,100]
 [4]	[1,1]
 [4]	[3,1]
 [4]	[10,1]
 [4]	[32,1]
 [4]	[100,1]
 [4]	[1,3]
 [4]	[3,3]
 [4]	[10,3]
 [4]	[32,3]
 [4]	[100,3]
 [4]	[1,10]
 [4]	[3,10]
 [4]	[10,10]
 [4]	[32,10]
 [4]	[100,10]
 [4]	[1,32]
 [4]	[3,32]
 [4]	[10,32]
 [4]	[32,32]
 [4]	[100,32]
 [4]	[1,100]
 [4]	[3,100]
 [4]	[10,100]
 [4]	[32,100]
 [4]	[100,100]
 [5]	[1,1]
 [5]	[3,1]
 [5]	[10,1]
 [5]	[32,1]
 [5]	[100,1]
 [5]	[1,3]
 [5]	[3,3]
 [5]	[10,3]
 [5]	[32,3]
 [5]	[100,3]
 [5]	[1,10]
 [5]	[3,10]
 [5]	[10,10]
 [5]	[32,10]
 [5]	[100,10]
 [5]	[1,32]
 [5]	[3,32]
 [5]	[10,32]
 [5]	[32,32]
 [5]	[100,32]
 [5]	[1,100]
 [5]	[3,100]
 [5]	[10,100]
 [5]	[32,100]
 [5]	[100,100]
> cvr

	 Cross-validated risk
	 glmboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),      control = boost_control(mstop = 100), center = TRUE) 

     1,1      3,1     10,1     32,1    100,1      1,3      3,3     10,3 
3.302710 3.289003 3.254355 3.201048 3.132957 3.299061 3.285124 3.249949 
    32,3    100,3     1,10     3,10    10,10    32,10   100,10     1,32 
3.195998 3.128614 3.292346 3.277996 3.240225 3.182837 3.117276 3.289440 
    3,32    10,32    32,32   100,32    1,100    3,100   10,100   32,100 
3.273384 3.228145 3.151754 3.088634 3.290803 3.272903 3.222363 3.120687 
 100,100 
3.020682 

	 Optimal number of boosting iterations: 100 100 
> ## plot the results
> par(mfrow = c(1, 2))
> plot(cvr)
> plot(cvr, type = "lines")
> ## extract optimal mstop (here: grid to small)
> mstop(cvr)
   mu sigma 
  100   100 
> ### END (don't test automatically)
> ## End(No test)
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### a more realistic example
> grid <- make.grid(c(mu = 400, sigma = 400), dense_mu_grid = FALSE)
> plot(grid)
> cvr <- cvrisk(model, grid = grid)
Starting cross-validation...
[fold]	[current mstop]
 [1]	[1,1]
 [1]	[2,1]
 [1]	[4,1]
 [1]	[7,1]
 [1]	[14,1]
 [1]	[28,1]
 [1]	[54,1]
 [1]	[106,1]
 [1]	[206,1]
 [1]	[400,1]
 [1]	[1,2]
 [1]	[2,2]
 [1]	[4,2]
 [1]	[7,2]
 [1]	[14,2]
 [1]	[28,2]
 [1]	[54,2]
 [1]	[106,2]
 [1]	[206,2]
 [1]	[400,2]
 [1]	[1,4]
 [1]	[2,4]
 [1]	[4,4]
 [1]	[7,4]
 [1]	[14,4]
 [1]	[28,4]
 [1]	[54,4]
 [1]	[106,4]
 [1]	[206,4]
 [1]	[400,4]
 [1]	[1,7]
 [1]	[2,7]
 [1]	[4,7]
 [1]	[7,7]
 [1]	[14,7]
 [1]	[28,7]
 [1]	[54,7]
 [1]	[106,7]
 [1]	[206,7]
 [1]	[400,7]
 [1]	[1,14]
 [1]	[2,14]
 [1]	[4,14]
 [1]	[7,14]
 [1]	[14,14]
 [1]	[28,14]
 [1]	[54,14]
 [1]	[106,14]
 [1]	[206,14]
 [1]	[400,14]
 [1]	[1,28]
 [1]	[2,28]
 [1]	[4,28]
 [1]	[7,28]
 [1]	[14,28]
 [1]	[28,28]
 [1]	[54,28]
 [1]	[106,28]
 [1]	[206,28]
 [1]	[400,28]
 [1]	[1,54]
 [1]	[2,54]
 [1]	[4,54]
 [1]	[7,54]
 [1]	[14,54]
 [1]	[28,54]
 [1]	[54,54]
 [1]	[106,54]
 [1]	[206,54]
 [1]	[400,54]
 [1]	[1,106]
 [1]	[2,106]
 [1]	[4,106]
 [1]	[7,106]
 [1]	[14,106]
 [1]	[28,106]
 [1]	[54,106]
 [1]	[106,106]
 [1]	[206,106]
 [1]	[400,106]
 [1]	[1,206]
 [1]	[2,206]
 [1]	[4,206]
 [1]	[7,206]
 [1]	[14,206]
 [1]	[28,206]
 [1]	[54,206]
 [1]	[106,206]
 [1]	[206,206]
 [1]	[400,206]
 [1]	[1,400]
 [1]	[2,400]
 [1]	[4,400]
 [1]	[7,400]
 [1]	[14,400]
 [1]	[28,400]
 [1]	[54,400]
 [1]	[106,400]
 [1]	[206,400]
 [1]	[400,400]
 [2]	[1,1]
 [2]	[2,1]
 [2]	[4,1]
 [2]	[7,1]
 [2]	[14,1]
 [2]	[28,1]
 [2]	[54,1]
 [2]	[106,1]
 [2]	[206,1]
 [2]	[400,1]
 [2]	[1,2]
 [2]	[2,2]
 [2]	[4,2]
 [2]	[7,2]
 [2]	[14,2]
 [2]	[28,2]
 [2]	[54,2]
 [2]	[106,2]
 [2]	[206,2]
 [2]	[400,2]
 [2]	[1,4]
 [2]	[2,4]
 [2]	[4,4]
 [2]	[7,4]
 [2]	[14,4]
 [2]	[28,4]
 [2]	[54,4]
 [2]	[106,4]
 [2]	[206,4]
 [2]	[400,4]
 [2]	[1,7]
 [2]	[2,7]
 [2]	[4,7]
 [2]	[7,7]
 [2]	[14,7]
 [2]	[28,7]
 [2]	[54,7]
 [2]	[106,7]
 [2]	[206,7]
 [2]	[400,7]
 [2]	[1,14]
 [2]	[2,14]
 [2]	[4,14]
 [2]	[7,14]
 [2]	[14,14]
 [2]	[28,14]
 [2]	[54,14]
 [2]	[106,14]
 [2]	[206,14]
 [2]	[400,14]
 [2]	[1,28]
 [2]	[2,28]
 [2]	[4,28]
 [2]	[7,28]
 [2]	[14,28]
 [2]	[28,28]
 [2]	[54,28]
 [2]	[106,28]
 [2]	[206,28]
 [2]	[400,28]
 [2]	[1,54]
 [2]	[2,54]
 [2]	[4,54]
 [2]	[7,54]
 [2]	[14,54]
 [2]	[28,54]
 [2]	[54,54]
 [2]	[106,54]
 [2]	[206,54]
 [2]	[400,54]
 [2]	[1,106]
 [2]	[2,106]
 [2]	[4,106]
 [2]	[7,106]
 [2]	[14,106]
 [2]	[28,106]
 [2]	[54,106]
 [2]	[106,106]
 [2]	[206,106]
 [2]	[400,106]
 [2]	[1,206]
 [2]	[2,206]
 [2]	[4,206]
 [2]	[7,206]
 [2]	[14,206]
 [2]	[28,206]
 [2]	[54,206]
 [2]	[106,206]
 [2]	[206,206]
 [2]	[400,206]
 [2]	[1,400]
 [2]	[2,400]
 [2]	[4,400]
 [2]	[7,400]
 [2]	[14,400]
 [2]	[28,400]
 [2]	[54,400]
 [2]	[106,400]
 [2]	[206,400]
 [2]	[400,400]
 [3]	[1,1]
 [3]	[2,1]
 [3]	[4,1]
 [3]	[7,1]
 [3]	[14,1]
 [3]	[28,1]
 [3]	[54,1]
 [3]	[106,1]
 [3]	[206,1]
 [3]	[400,1]
 [3]	[1,2]
 [3]	[2,2]
 [3]	[4,2]
 [3]	[7,2]
 [3]	[14,2]
 [3]	[28,2]
 [3]	[54,2]
 [3]	[106,2]
 [3]	[206,2]
 [3]	[400,2]
 [3]	[1,4]
 [3]	[2,4]
 [3]	[4,4]
 [3]	[7,4]
 [3]	[14,4]
 [3]	[28,4]
 [3]	[54,4]
 [3]	[106,4]
 [3]	[206,4]
 [3]	[400,4]
 [3]	[1,7]
 [3]	[2,7]
 [3]	[4,7]
 [3]	[7,7]
 [3]	[14,7]
 [3]	[28,7]
 [3]	[54,7]
 [3]	[106,7]
 [3]	[206,7]
 [3]	[400,7]
 [3]	[1,14]
 [3]	[2,14]
 [3]	[4,14]
 [3]	[7,14]
 [3]	[14,14]
 [3]	[28,14]
 [3]	[54,14]
 [3]	[106,14]
 [3]	[206,14]
 [3]	[400,14]
 [3]	[1,28]
 [3]	[2,28]
 [3]	[4,28]
 [3]	[7,28]
 [3]	[14,28]
 [3]	[28,28]
 [3]	[54,28]
 [3]	[106,28]
 [3]	[206,28]
 [3]	[400,28]
 [3]	[1,54]
 [3]	[2,54]
 [3]	[4,54]
 [3]	[7,54]
 [3]	[14,54]
 [3]	[28,54]
 [3]	[54,54]
 [3]	[106,54]
 [3]	[206,54]
 [3]	[400,54]
 [3]	[1,106]
 [3]	[2,106]
 [3]	[4,106]
 [3]	[7,106]
 [3]	[14,106]
 [3]	[28,106]
 [3]	[54,106]
 [3]	[106,106]
 [3]	[206,106]
 [3]	[400,106]
 [3]	[1,206]
 [3]	[2,206]
 [3]	[4,206]
 [3]	[7,206]
 [3]	[14,206]
 [3]	[28,206]
 [3]	[54,206]
 [3]	[106,206]
 [3]	[206,206]
 [3]	[400,206]
 [3]	[1,400]
 [3]	[2,400]
 [3]	[4,400]
 [3]	[7,400]
 [3]	[14,400]
 [3]	[28,400]
 [3]	[54,400]
 [3]	[106,400]
 [3]	[206,400]
 [3]	[400,400]
 [4]	[1,1]
 [4]	[2,1]
 [4]	[4,1]
 [4]	[7,1]
 [4]	[14,1]
 [4]	[28,1]
 [4]	[54,1]
 [4]	[106,1]
 [4]	[206,1]
 [4]	[400,1]
 [4]	[1,2]
 [4]	[2,2]
 [4]	[4,2]
 [4]	[7,2]
 [4]	[14,2]
 [4]	[28,2]
 [4]	[54,2]
 [4]	[106,2]
 [4]	[206,2]
 [4]	[400,2]
 [4]	[1,4]
 [4]	[2,4]
 [4]	[4,4]
 [4]	[7,4]
 [4]	[14,4]
 [4]	[28,4]
 [4]	[54,4]
 [4]	[106,4]
 [4]	[206,4]
 [4]	[400,4]
 [4]	[1,7]
 [4]	[2,7]
 [4]	[4,7]
 [4]	[7,7]
 [4]	[14,7]
 [4]	[28,7]
 [4]	[54,7]
 [4]	[106,7]
 [4]	[206,7]
 [4]	[400,7]
 [4]	[1,14]
 [4]	[2,14]
 [4]	[4,14]
 [4]	[7,14]
 [4]	[14,14]
 [4]	[28,14]
 [4]	[54,14]
 [4]	[106,14]
 [4]	[206,14]
 [4]	[400,14]
 [4]	[1,28]
 [4]	[2,28]
 [4]	[4,28]
 [4]	[7,28]
 [4]	[14,28]
 [4]	[28,28]
 [4]	[54,28]
 [4]	[106,28]
 [4]	[206,28]
 [4]	[400,28]
 [4]	[1,54]
 [4]	[2,54]
 [4]	[4,54]
 [4]	[7,54]
 [4]	[14,54]
 [4]	[28,54]
 [4]	[54,54]
 [4]	[106,54]
 [4]	[206,54]
 [4]	[400,54]
 [4]	[1,106]
 [4]	[2,106]
 [4]	[4,106]
 [4]	[7,106]
 [4]	[14,106]
 [4]	[28,106]
 [4]	[54,106]
 [4]	[106,106]
 [4]	[206,106]
 [4]	[400,106]
 [4]	[1,206]
 [4]	[2,206]
 [4]	[4,206]
 [4]	[7,206]
 [4]	[14,206]
 [4]	[28,206]
 [4]	[54,206]
 [4]	[106,206]
 [4]	[206,206]
 [4]	[400,206]
 [4]	[1,400]
 [4]	[2,400]
 [4]	[4,400]
 [4]	[7,400]
 [4]	[14,400]
 [4]	[28,400]
 [4]	[54,400]
 [4]	[106,400]
 [4]	[206,400]
 [4]	[400,400]
 [5]	[1,1]
 [5]	[2,1]
 [5]	[4,1]
 [5]	[7,1]
 [5]	[14,1]
 [5]	[28,1]
 [5]	[54,1]
 [5]	[106,1]
 [5]	[206,1]
 [5]	[400,1]
 [5]	[1,2]
 [5]	[2,2]
 [5]	[4,2]
 [5]	[7,2]
 [5]	[14,2]
 [5]	[28,2]
 [5]	[54,2]
 [5]	[106,2]
 [5]	[206,2]
 [5]	[400,2]
 [5]	[1,4]
 [5]	[2,4]
 [5]	[4,4]
 [5]	[7,4]
 [5]	[14,4]
 [5]	[28,4]
 [5]	[54,4]
 [5]	[106,4]
 [5]	[206,4]
 [5]	[400,4]
 [5]	[1,7]
 [5]	[2,7]
 [5]	[4,7]
 [5]	[7,7]
 [5]	[14,7]
 [5]	[28,7]
 [5]	[54,7]
 [5]	[106,7]
 [5]	[206,7]
 [5]	[400,7]
 [5]	[1,14]
 [5]	[2,14]
 [5]	[4,14]
 [5]	[7,14]
 [5]	[14,14]
 [5]	[28,14]
 [5]	[54,14]
 [5]	[106,14]
 [5]	[206,14]
 [5]	[400,14]
 [5]	[1,28]
 [5]	[2,28]
 [5]	[4,28]
 [5]	[7,28]
 [5]	[14,28]
 [5]	[28,28]
 [5]	[54,28]
 [5]	[106,28]
 [5]	[206,28]
 [5]	[400,28]
 [5]	[1,54]
 [5]	[2,54]
 [5]	[4,54]
 [5]	[7,54]
 [5]	[14,54]
 [5]	[28,54]
 [5]	[54,54]
 [5]	[106,54]
 [5]	[206,54]
 [5]	[400,54]
 [5]	[1,106]
 [5]	[2,106]
 [5]	[4,106]
 [5]	[7,106]
 [5]	[14,106]
 [5]	[28,106]
 [5]	[54,106]
 [5]	[106,106]
 [5]	[206,106]
 [5]	[400,106]
 [5]	[1,206]
 [5]	[2,206]
 [5]	[4,206]
 [5]	[7,206]
 [5]	[14,206]
 [5]	[28,206]
 [5]	[54,206]
 [5]	[106,206]
 [5]	[206,206]
 [5]	[400,206]
 [5]	[1,400]
 [5]	[2,400]
 [5]	[4,400]
 [5]	[7,400]
 [5]	[14,400]
 [5]	[28,400]
 [5]	[54,400]
 [5]	[106,400]
 [5]	[206,400]
 [5]	[400,400]
 [6]	[1,1]
 [6]	[2,1]
 [6]	[4,1]
 [6]	[7,1]
 [6]	[14,1]
 [6]	[28,1]
 [6]	[54,1]
 [6]	[106,1]
 [6]	[206,1]
 [6]	[400,1]
 [6]	[1,2]
 [6]	[2,2]
 [6]	[4,2]
 [6]	[7,2]
 [6]	[14,2]
 [6]	[28,2]
 [6]	[54,2]
 [6]	[106,2]
 [6]	[206,2]
 [6]	[400,2]
 [6]	[1,4]
 [6]	[2,4]
 [6]	[4,4]
 [6]	[7,4]
 [6]	[14,4]
 [6]	[28,4]
 [6]	[54,4]
 [6]	[106,4]
 [6]	[206,4]
 [6]	[400,4]
 [6]	[1,7]
 [6]	[2,7]
 [6]	[4,7]
 [6]	[7,7]
 [6]	[14,7]
 [6]	[28,7]
 [6]	[54,7]
 [6]	[106,7]
 [6]	[206,7]
 [6]	[400,7]
 [6]	[1,14]
 [6]	[2,14]
 [6]	[4,14]
 [6]	[7,14]
 [6]	[14,14]
 [6]	[28,14]
 [6]	[54,14]
 [6]	[106,14]
 [6]	[206,14]
 [6]	[400,14]
 [6]	[1,28]
 [6]	[2,28]
 [6]	[4,28]
 [6]	[7,28]
 [6]	[14,28]
 [6]	[28,28]
 [6]	[54,28]
 [6]	[106,28]
 [6]	[206,28]
 [6]	[400,28]
 [6]	[1,54]
 [6]	[2,54]
 [6]	[4,54]
 [6]	[7,54]
 [6]	[14,54]
 [6]	[28,54]
 [6]	[54,54]
 [6]	[106,54]
 [6]	[206,54]
 [6]	[400,54]
 [6]	[1,106]
 [6]	[2,106]
 [6]	[4,106]
 [6]	[7,106]
 [6]	[14,106]
 [6]	[28,106]
 [6]	[54,106]
 [6]	[106,106]
 [6]	[206,106]
 [6]	[400,106]
 [6]	[1,206]
 [6]	[2,206]
 [6]	[4,206]
 [6]	[7,206]
 [6]	[14,206]
 [6]	[28,206]
 [6]	[54,206]
 [6]	[106,206]
 [6]	[206,206]
 [6]	[400,206]
 [6]	[1,400]
 [6]	[2,400]
 [6]	[4,400]
 [6]	[7,400]
 [6]	[14,400]
 [6]	[28,400]
 [6]	[54,400]
 [6]	[106,400]
 [6]	[206,400]
 [6]	[400,400]
 [7]	[1,1]
 [7]	[2,1]
 [7]	[4,1]
 [7]	[7,1]
 [7]	[14,1]
 [7]	[28,1]
 [7]	[54,1]
 [7]	[106,1]
 [7]	[206,1]
 [7]	[400,1]
 [7]	[1,2]
 [7]	[2,2]
 [7]	[4,2]
 [7]	[7,2]
 [7]	[14,2]
 [7]	[28,2]
 [7]	[54,2]
 [7]	[106,2]
 [7]	[206,2]
 [7]	[400,2]
 [7]	[1,4]
 [7]	[2,4]
 [7]	[4,4]
 [7]	[7,4]
 [7]	[14,4]
 [7]	[28,4]
 [7]	[54,4]
 [7]	[106,4]
 [7]	[206,4]
 [7]	[400,4]
 [7]	[1,7]
 [7]	[2,7]
 [7]	[4,7]
 [7]	[7,7]
 [7]	[14,7]
 [7]	[28,7]
 [7]	[54,7]
 [7]	[106,7]
 [7]	[206,7]
 [7]	[400,7]
 [7]	[1,14]
 [7]	[2,14]
 [7]	[4,14]
 [7]	[7,14]
 [7]	[14,14]
 [7]	[28,14]
 [7]	[54,14]
 [7]	[106,14]
 [7]	[206,14]
 [7]	[400,14]
 [7]	[1,28]
 [7]	[2,28]
 [7]	[4,28]
 [7]	[7,28]
 [7]	[14,28]
 [7]	[28,28]
 [7]	[54,28]
 [7]	[106,28]
 [7]	[206,28]
 [7]	[400,28]
 [7]	[1,54]
 [7]	[2,54]
 [7]	[4,54]
 [7]	[7,54]
 [7]	[14,54]
 [7]	[28,54]
 [7]	[54,54]
 [7]	[106,54]
 [7]	[206,54]
 [7]	[400,54]
 [7]	[1,106]
 [7]	[2,106]
 [7]	[4,106]
 [7]	[7,106]
 [7]	[14,106]
 [7]	[28,106]
 [7]	[54,106]
 [7]	[106,106]
 [7]	[206,106]
 [7]	[400,106]
 [7]	[1,206]
 [7]	[2,206]
 [7]	[4,206]
 [7]	[7,206]
 [7]	[14,206]
 [7]	[28,206]
 [7]	[54,206]
 [7]	[106,206]
 [7]	[206,206]
 [7]	[400,206]
 [7]	[1,400]
 [7]	[2,400]
 [7]	[4,400]
 [7]	[7,400]
 [7]	[14,400]
 [7]	[28,400]
 [7]	[54,400]
 [7]	[106,400]
 [7]	[206,400]
 [7]	[400,400]
 [8]	[1,1]
 [8]	[2,1]
 [8]	[4,1]
 [8]	[7,1]
 [8]	[14,1]
 [8]	[28,1]
 [8]	[54,1]
 [8]	[106,1]
 [8]	[206,1]
 [8]	[400,1]
 [8]	[1,2]
 [8]	[2,2]
 [8]	[4,2]
 [8]	[7,2]
 [8]	[14,2]
 [8]	[28,2]
 [8]	[54,2]
 [8]	[106,2]
 [8]	[206,2]
 [8]	[400,2]
 [8]	[1,4]
 [8]	[2,4]
 [8]	[4,4]
 [8]	[7,4]
 [8]	[14,4]
 [8]	[28,4]
 [8]	[54,4]
 [8]	[106,4]
 [8]	[206,4]
 [8]	[400,4]
 [8]	[1,7]
 [8]	[2,7]
 [8]	[4,7]
 [8]	[7,7]
 [8]	[14,7]
 [8]	[28,7]
 [8]	[54,7]
 [8]	[106,7]
 [8]	[206,7]
 [8]	[400,7]
 [8]	[1,14]
 [8]	[2,14]
 [8]	[4,14]
 [8]	[7,14]
 [8]	[14,14]
 [8]	[28,14]
 [8]	[54,14]
 [8]	[106,14]
 [8]	[206,14]
 [8]	[400,14]
 [8]	[1,28]
 [8]	[2,28]
 [8]	[4,28]
 [8]	[7,28]
 [8]	[14,28]
 [8]	[28,28]
 [8]	[54,28]
 [8]	[106,28]
 [8]	[206,28]
 [8]	[400,28]
 [8]	[1,54]
 [8]	[2,54]
 [8]	[4,54]
 [8]	[7,54]
 [8]	[14,54]
 [8]	[28,54]
 [8]	[54,54]
 [8]	[106,54]
 [8]	[206,54]
 [8]	[400,54]
 [8]	[1,106]
 [8]	[2,106]
 [8]	[4,106]
 [8]	[7,106]
 [8]	[14,106]
 [8]	[28,106]
 [8]	[54,106]
 [8]	[106,106]
 [8]	[206,106]
 [8]	[400,106]
 [8]	[1,206]
 [8]	[2,206]
 [8]	[4,206]
 [8]	[7,206]
 [8]	[14,206]
 [8]	[28,206]
 [8]	[54,206]
 [8]	[106,206]
 [8]	[206,206]
 [8]	[400,206]
 [8]	[1,400]
 [8]	[2,400]
 [8]	[4,400]
 [8]	[7,400]
 [8]	[14,400]
 [8]	[28,400]
 [8]	[54,400]
 [8]	[106,400]
 [8]	[206,400]
 [8]	[400,400]
 [9]	[1,1]
 [9]	[2,1]
 [9]	[4,1]
 [9]	[7,1]
 [9]	[14,1]
 [9]	[28,1]
 [9]	[54,1]
 [9]	[106,1]
 [9]	[206,1]
 [9]	[400,1]
 [9]	[1,2]
 [9]	[2,2]
 [9]	[4,2]
 [9]	[7,2]
 [9]	[14,2]
 [9]	[28,2]
 [9]	[54,2]
 [9]	[106,2]
 [9]	[206,2]
 [9]	[400,2]
 [9]	[1,4]
 [9]	[2,4]
 [9]	[4,4]
 [9]	[7,4]
 [9]	[14,4]
 [9]	[28,4]
 [9]	[54,4]
 [9]	[106,4]
 [9]	[206,4]
 [9]	[400,4]
 [9]	[1,7]
 [9]	[2,7]
 [9]	[4,7]
 [9]	[7,7]
 [9]	[14,7]
 [9]	[28,7]
 [9]	[54,7]
 [9]	[106,7]
 [9]	[206,7]
 [9]	[400,7]
 [9]	[1,14]
 [9]	[2,14]
 [9]	[4,14]
 [9]	[7,14]
 [9]	[14,14]
 [9]	[28,14]
 [9]	[54,14]
 [9]	[106,14]
 [9]	[206,14]
 [9]	[400,14]
 [9]	[1,28]
 [9]	[2,28]
 [9]	[4,28]
 [9]	[7,28]
 [9]	[14,28]
 [9]	[28,28]
 [9]	[54,28]
 [9]	[106,28]
 [9]	[206,28]
 [9]	[400,28]
 [9]	[1,54]
 [9]	[2,54]
 [9]	[4,54]
 [9]	[7,54]
 [9]	[14,54]
 [9]	[28,54]
 [9]	[54,54]
 [9]	[106,54]
 [9]	[206,54]
 [9]	[400,54]
 [9]	[1,106]
 [9]	[2,106]
 [9]	[4,106]
 [9]	[7,106]
 [9]	[14,106]
 [9]	[28,106]
 [9]	[54,106]
 [9]	[106,106]
 [9]	[206,106]
 [9]	[400,106]
 [9]	[1,206]
 [9]	[2,206]
 [9]	[4,206]
 [9]	[7,206]
 [9]	[14,206]
 [9]	[28,206]
 [9]	[54,206]
 [9]	[106,206]
 [9]	[206,206]
 [9]	[400,206]
 [9]	[1,400]
 [9]	[2,400]
 [9]	[4,400]
 [9]	[7,400]
 [9]	[14,400]
 [9]	[28,400]
 [9]	[54,400]
 [9]	[106,400]
 [9]	[206,400]
 [9]	[400,400]
 [10]	[1,1]
 [10]	[2,1]
 [10]	[4,1]
 [10]	[7,1]
 [10]	[14,1]
 [10]	[28,1]
 [10]	[54,1]
 [10]	[106,1]
 [10]	[206,1]
 [10]	[400,1]
 [10]	[1,2]
 [10]	[2,2]
 [10]	[4,2]
 [10]	[7,2]
 [10]	[14,2]
 [10]	[28,2]
 [10]	[54,2]
 [10]	[106,2]
 [10]	[206,2]
 [10]	[400,2]
 [10]	[1,4]
 [10]	[2,4]
 [10]	[4,4]
 [10]	[7,4]
 [10]	[14,4]
 [10]	[28,4]
 [10]	[54,4]
 [10]	[106,4]
 [10]	[206,4]
 [10]	[400,4]
 [10]	[1,7]
 [10]	[2,7]
 [10]	[4,7]
 [10]	[7,7]
 [10]	[14,7]
 [10]	[28,7]
 [10]	[54,7]
 [10]	[106,7]
 [10]	[206,7]
 [10]	[400,7]
 [10]	[1,14]
 [10]	[2,14]
 [10]	[4,14]
 [10]	[7,14]
 [10]	[14,14]
 [10]	[28,14]
 [10]	[54,14]
 [10]	[106,14]
 [10]	[206,14]
 [10]	[400,14]
 [10]	[1,28]
 [10]	[2,28]
 [10]	[4,28]
 [10]	[7,28]
 [10]	[14,28]
 [10]	[28,28]
 [10]	[54,28]
 [10]	[106,28]
 [10]	[206,28]
 [10]	[400,28]
 [10]	[1,54]
 [10]	[2,54]
 [10]	[4,54]
 [10]	[7,54]
 [10]	[14,54]
 [10]	[28,54]
 [10]	[54,54]
 [10]	[106,54]
 [10]	[206,54]
 [10]	[400,54]
 [10]	[1,106]
 [10]	[2,106]
 [10]	[4,106]
 [10]	[7,106]
 [10]	[14,106]
 [10]	[28,106]
 [10]	[54,106]
 [10]	[106,106]
 [10]	[206,106]
 [10]	[400,106]
 [10]	[1,206]
 [10]	[2,206]
 [10]	[4,206]
 [10]	[7,206]
 [10]	[14,206]
 [10]	[28,206]
 [10]	[54,206]
 [10]	[106,206]
 [10]	[206,206]
 [10]	[400,206]
 [10]	[1,400]
 [10]	[2,400]
 [10]	[4,400]
 [10]	[7,400]
 [10]	[14,400]
 [10]	[28,400]
 [10]	[54,400]
 [10]	[106,400]
 [10]	[206,400]
 [10]	[400,400]
 [11]	[1,1]
 [11]	[2,1]
 [11]	[4,1]
 [11]	[7,1]
 [11]	[14,1]
 [11]	[28,1]
 [11]	[54,1]
 [11]	[106,1]
 [11]	[206,1]
 [11]	[400,1]
 [11]	[1,2]
 [11]	[2,2]
 [11]	[4,2]
 [11]	[7,2]
 [11]	[14,2]
 [11]	[28,2]
 [11]	[54,2]
 [11]	[106,2]
 [11]	[206,2]
 [11]	[400,2]
 [11]	[1,4]
 [11]	[2,4]
 [11]	[4,4]
 [11]	[7,4]
 [11]	[14,4]
 [11]	[28,4]
 [11]	[54,4]
 [11]	[106,4]
 [11]	[206,4]
 [11]	[400,4]
 [11]	[1,7]
 [11]	[2,7]
 [11]	[4,7]
 [11]	[7,7]
 [11]	[14,7]
 [11]	[28,7]
 [11]	[54,7]
 [11]	[106,7]
 [11]	[206,7]
 [11]	[400,7]
 [11]	[1,14]
 [11]	[2,14]
 [11]	[4,14]
 [11]	[7,14]
 [11]	[14,14]
 [11]	[28,14]
 [11]	[54,14]
 [11]	[106,14]
 [11]	[206,14]
 [11]	[400,14]
 [11]	[1,28]
 [11]	[2,28]
 [11]	[4,28]
 [11]	[7,28]
 [11]	[14,28]
 [11]	[28,28]
 [11]	[54,28]
 [11]	[106,28]
 [11]	[206,28]
 [11]	[400,28]
 [11]	[1,54]
 [11]	[2,54]
 [11]	[4,54]
 [11]	[7,54]
 [11]	[14,54]
 [11]	[28,54]
 [11]	[54,54]
 [11]	[106,54]
 [11]	[206,54]
 [11]	[400,54]
 [11]	[1,106]
 [11]	[2,106]
 [11]	[4,106]
 [11]	[7,106]
 [11]	[14,106]
 [11]	[28,106]
 [11]	[54,106]
 [11]	[106,106]
 [11]	[206,106]
 [11]	[400,106]
 [11]	[1,206]
 [11]	[2,206]
 [11]	[4,206]
 [11]	[7,206]
 [11]	[14,206]
 [11]	[28,206]
 [11]	[54,206]
 [11]	[106,206]
 [11]	[206,206]
 [11]	[400,206]
 [11]	[1,400]
 [11]	[2,400]
 [11]	[4,400]
 [11]	[7,400]
 [11]	[14,400]
 [11]	[28,400]
 [11]	[54,400]
 [11]	[106,400]
 [11]	[206,400]
 [11]	[400,400]
 [12]	[1,1]
 [12]	[2,1]
 [12]	[4,1]
 [12]	[7,1]
 [12]	[14,1]
 [12]	[28,1]
 [12]	[54,1]
 [12]	[106,1]
 [12]	[206,1]
 [12]	[400,1]
 [12]	[1,2]
 [12]	[2,2]
 [12]	[4,2]
 [12]	[7,2]
 [12]	[14,2]
 [12]	[28,2]
 [12]	[54,2]
 [12]	[106,2]
 [12]	[206,2]
 [12]	[400,2]
 [12]	[1,4]
 [12]	[2,4]
 [12]	[4,4]
 [12]	[7,4]
 [12]	[14,4]
 [12]	[28,4]
 [12]	[54,4]
 [12]	[106,4]
 [12]	[206,4]
 [12]	[400,4]
 [12]	[1,7]
 [12]	[2,7]
 [12]	[4,7]
 [12]	[7,7]
 [12]	[14,7]
 [12]	[28,7]
 [12]	[54,7]
 [12]	[106,7]
 [12]	[206,7]
 [12]	[400,7]
 [12]	[1,14]
 [12]	[2,14]
 [12]	[4,14]
 [12]	[7,14]
 [12]	[14,14]
 [12]	[28,14]
 [12]	[54,14]
 [12]	[106,14]
 [12]	[206,14]
 [12]	[400,14]
 [12]	[1,28]
 [12]	[2,28]
 [12]	[4,28]
 [12]	[7,28]
 [12]	[14,28]
 [12]	[28,28]
 [12]	[54,28]
 [12]	[106,28]
 [12]	[206,28]
 [12]	[400,28]
 [12]	[1,54]
 [12]	[2,54]
 [12]	[4,54]
 [12]	[7,54]
 [12]	[14,54]
 [12]	[28,54]
 [12]	[54,54]
 [12]	[106,54]
 [12]	[206,54]
 [12]	[400,54]
 [12]	[1,106]
 [12]	[2,106]
 [12]	[4,106]
 [12]	[7,106]
 [12]	[14,106]
 [12]	[28,106]
 [12]	[54,106]
 [12]	[106,106]
 [12]	[206,106]
 [12]	[400,106]
 [12]	[1,206]
 [12]	[2,206]
 [12]	[4,206]
 [12]	[7,206]
 [12]	[14,206]
 [12]	[28,206]
 [12]	[54,206]
 [12]	[106,206]
 [12]	[206,206]
 [12]	[400,206]
 [12]	[1,400]
 [12]	[2,400]
 [12]	[4,400]
 [12]	[7,400]
 [12]	[14,400]
 [12]	[28,400]
 [12]	[54,400]
 [12]	[106,400]
 [12]	[206,400]
 [12]	[400,400]
 [13]	[1,1]
 [13]	[2,1]
 [13]	[4,1]
 [13]	[7,1]
 [13]	[14,1]
 [13]	[28,1]
 [13]	[54,1]
 [13]	[106,1]
 [13]	[206,1]
 [13]	[400,1]
 [13]	[1,2]
 [13]	[2,2]
 [13]	[4,2]
 [13]	[7,2]
 [13]	[14,2]
 [13]	[28,2]
 [13]	[54,2]
 [13]	[106,2]
 [13]	[206,2]
 [13]	[400,2]
 [13]	[1,4]
 [13]	[2,4]
 [13]	[4,4]
 [13]	[7,4]
 [13]	[14,4]
 [13]	[28,4]
 [13]	[54,4]
 [13]	[106,4]
 [13]	[206,4]
 [13]	[400,4]
 [13]	[1,7]
 [13]	[2,7]
 [13]	[4,7]
 [13]	[7,7]
 [13]	[14,7]
 [13]	[28,7]
 [13]	[54,7]
 [13]	[106,7]
 [13]	[206,7]
 [13]	[400,7]
 [13]	[1,14]
 [13]	[2,14]
 [13]	[4,14]
 [13]	[7,14]
 [13]	[14,14]
 [13]	[28,14]
 [13]	[54,14]
 [13]	[106,14]
 [13]	[206,14]
 [13]	[400,14]
 [13]	[1,28]
 [13]	[2,28]
 [13]	[4,28]
 [13]	[7,28]
 [13]	[14,28]
 [13]	[28,28]
 [13]	[54,28]
 [13]	[106,28]
 [13]	[206,28]
 [13]	[400,28]
 [13]	[1,54]
 [13]	[2,54]
 [13]	[4,54]
 [13]	[7,54]
 [13]	[14,54]
 [13]	[28,54]
 [13]	[54,54]
 [13]	[106,54]
 [13]	[206,54]
 [13]	[400,54]
 [13]	[1,106]
 [13]	[2,106]
 [13]	[4,106]
 [13]	[7,106]
 [13]	[14,106]
 [13]	[28,106]
 [13]	[54,106]
 [13]	[106,106]
 [13]	[206,106]
 [13]	[400,106]
 [13]	[1,206]
 [13]	[2,206]
 [13]	[4,206]
 [13]	[7,206]
 [13]	[14,206]
 [13]	[28,206]
 [13]	[54,206]
 [13]	[106,206]
 [13]	[206,206]
 [13]	[400,206]
 [13]	[1,400]
 [13]	[2,400]
 [13]	[4,400]
 [13]	[7,400]
 [13]	[14,400]
 [13]	[28,400]
 [13]	[54,400]
 [13]	[106,400]
 [13]	[206,400]
 [13]	[400,400]
 [14]	[1,1]
 [14]	[2,1]
 [14]	[4,1]
 [14]	[7,1]
 [14]	[14,1]
 [14]	[28,1]
 [14]	[54,1]
 [14]	[106,1]
 [14]	[206,1]
 [14]	[400,1]
 [14]	[1,2]
 [14]	[2,2]
 [14]	[4,2]
 [14]	[7,2]
 [14]	[14,2]
 [14]	[28,2]
 [14]	[54,2]
 [14]	[106,2]
 [14]	[206,2]
 [14]	[400,2]
 [14]	[1,4]
 [14]	[2,4]
 [14]	[4,4]
 [14]	[7,4]
 [14]	[14,4]
 [14]	[28,4]
 [14]	[54,4]
 [14]	[106,4]
 [14]	[206,4]
 [14]	[400,4]
 [14]	[1,7]
 [14]	[2,7]
 [14]	[4,7]
 [14]	[7,7]
 [14]	[14,7]
 [14]	[28,7]
 [14]	[54,7]
 [14]	[106,7]
 [14]	[206,7]
 [14]	[400,7]
 [14]	[1,14]
 [14]	[2,14]
 [14]	[4,14]
 [14]	[7,14]
 [14]	[14,14]
 [14]	[28,14]
 [14]	[54,14]
 [14]	[106,14]
 [14]	[206,14]
 [14]	[400,14]
 [14]	[1,28]
 [14]	[2,28]
 [14]	[4,28]
 [14]	[7,28]
 [14]	[14,28]
 [14]	[28,28]
 [14]	[54,28]
 [14]	[106,28]
 [14]	[206,28]
 [14]	[400,28]
 [14]	[1,54]
 [14]	[2,54]
 [14]	[4,54]
 [14]	[7,54]
 [14]	[14,54]
 [14]	[28,54]
 [14]	[54,54]
 [14]	[106,54]
 [14]	[206,54]
 [14]	[400,54]
 [14]	[1,106]
 [14]	[2,106]
 [14]	[4,106]
 [14]	[7,106]
 [14]	[14,106]
 [14]	[28,106]
 [14]	[54,106]
 [14]	[106,106]
 [14]	[206,106]
 [14]	[400,106]
 [14]	[1,206]
 [14]	[2,206]
 [14]	[4,206]
 [14]	[7,206]
 [14]	[14,206]
 [14]	[28,206]
 [14]	[54,206]
 [14]	[106,206]
 [14]	[206,206]
 [14]	[400,206]
 [14]	[1,400]
 [14]	[2,400]
 [14]	[4,400]
 [14]	[7,400]
 [14]	[14,400]
 [14]	[28,400]
 [14]	[54,400]
 [14]	[106,400]
 [14]	[206,400]
 [14]	[400,400]
 [15]	[1,1]
 [15]	[2,1]
 [15]	[4,1]
 [15]	[7,1]
 [15]	[14,1]
 [15]	[28,1]
 [15]	[54,1]
 [15]	[106,1]
 [15]	[206,1]
 [15]	[400,1]
 [15]	[1,2]
 [15]	[2,2]
 [15]	[4,2]
 [15]	[7,2]
 [15]	[14,2]
 [15]	[28,2]
 [15]	[54,2]
 [15]	[106,2]
 [15]	[206,2]
 [15]	[400,2]
 [15]	[1,4]
 [15]	[2,4]
 [15]	[4,4]
 [15]	[7,4]
 [15]	[14,4]
 [15]	[28,4]
 [15]	[54,4]
 [15]	[106,4]
 [15]	[206,4]
 [15]	[400,4]
 [15]	[1,7]
 [15]	[2,7]
 [15]	[4,7]
 [15]	[7,7]
 [15]	[14,7]
 [15]	[28,7]
 [15]	[54,7]
 [15]	[106,7]
 [15]	[206,7]
 [15]	[400,7]
 [15]	[1,14]
 [15]	[2,14]
 [15]	[4,14]
 [15]	[7,14]
 [15]	[14,14]
 [15]	[28,14]
 [15]	[54,14]
 [15]	[106,14]
 [15]	[206,14]
 [15]	[400,14]
 [15]	[1,28]
 [15]	[2,28]
 [15]	[4,28]
 [15]	[7,28]
 [15]	[14,28]
 [15]	[28,28]
 [15]	[54,28]
 [15]	[106,28]
 [15]	[206,28]
 [15]	[400,28]
 [15]	[1,54]
 [15]	[2,54]
 [15]	[4,54]
 [15]	[7,54]
 [15]	[14,54]
 [15]	[28,54]
 [15]	[54,54]
 [15]	[106,54]
 [15]	[206,54]
 [15]	[400,54]
 [15]	[1,106]
 [15]	[2,106]
 [15]	[4,106]
 [15]	[7,106]
 [15]	[14,106]
 [15]	[28,106]
 [15]	[54,106]
 [15]	[106,106]
 [15]	[206,106]
 [15]	[400,106]
 [15]	[1,206]
 [15]	[2,206]
 [15]	[4,206]
 [15]	[7,206]
 [15]	[14,206]
 [15]	[28,206]
 [15]	[54,206]
 [15]	[106,206]
 [15]	[206,206]
 [15]	[400,206]
 [15]	[1,400]
 [15]	[2,400]
 [15]	[4,400]
 [15]	[7,400]
 [15]	[14,400]
 [15]	[28,400]
 [15]	[54,400]
 [15]	[106,400]
 [15]	[206,400]
 [15]	[400,400]
 [16]	[1,1]
 [16]	[2,1]
 [16]	[4,1]
 [16]	[7,1]
 [16]	[14,1]
 [16]	[28,1]
 [16]	[54,1]
 [16]	[106,1]
 [16]	[206,1]
 [16]	[400,1]
 [16]	[1,2]
 [16]	[2,2]
 [16]	[4,2]
 [16]	[7,2]
 [16]	[14,2]
 [16]	[28,2]
 [16]	[54,2]
 [16]	[106,2]
 [16]	[206,2]
 [16]	[400,2]
 [16]	[1,4]
 [16]	[2,4]
 [16]	[4,4]
 [16]	[7,4]
 [16]	[14,4]
 [16]	[28,4]
 [16]	[54,4]
 [16]	[106,4]
 [16]	[206,4]
 [16]	[400,4]
 [16]	[1,7]
 [16]	[2,7]
 [16]	[4,7]
 [16]	[7,7]
 [16]	[14,7]
 [16]	[28,7]
 [16]	[54,7]
 [16]	[106,7]
 [16]	[206,7]
 [16]	[400,7]
 [16]	[1,14]
 [16]	[2,14]
 [16]	[4,14]
 [16]	[7,14]
 [16]	[14,14]
 [16]	[28,14]
 [16]	[54,14]
 [16]	[106,14]
 [16]	[206,14]
 [16]	[400,14]
 [16]	[1,28]
 [16]	[2,28]
 [16]	[4,28]
 [16]	[7,28]
 [16]	[14,28]
 [16]	[28,28]
 [16]	[54,28]
 [16]	[106,28]
 [16]	[206,28]
 [16]	[400,28]
 [16]	[1,54]
 [16]	[2,54]
 [16]	[4,54]
 [16]	[7,54]
 [16]	[14,54]
 [16]	[28,54]
 [16]	[54,54]
 [16]	[106,54]
 [16]	[206,54]
 [16]	[400,54]
 [16]	[1,106]
 [16]	[2,106]
 [16]	[4,106]
 [16]	[7,106]
 [16]	[14,106]
 [16]	[28,106]
 [16]	[54,106]
 [16]	[106,106]
 [16]	[206,106]
 [16]	[400,106]
 [16]	[1,206]
 [16]	[2,206]
 [16]	[4,206]
 [16]	[7,206]
 [16]	[14,206]
 [16]	[28,206]
 [16]	[54,206]
 [16]	[106,206]
 [16]	[206,206]
 [16]	[400,206]
 [16]	[1,400]
 [16]	[2,400]
 [16]	[4,400]
 [16]	[7,400]
 [16]	[14,400]
 [16]	[28,400]
 [16]	[54,400]
 [16]	[106,400]
 [16]	[206,400]
 [16]	[400,400]
 [17]	[1,1]
 [17]	[2,1]
 [17]	[4,1]
 [17]	[7,1]
 [17]	[14,1]
 [17]	[28,1]
 [17]	[54,1]
 [17]	[106,1]
 [17]	[206,1]
 [17]	[400,1]
 [17]	[1,2]
 [17]	[2,2]
 [17]	[4,2]
 [17]	[7,2]
 [17]	[14,2]
 [17]	[28,2]
 [17]	[54,2]
 [17]	[106,2]
 [17]	[206,2]
 [17]	[400,2]
 [17]	[1,4]
 [17]	[2,4]
 [17]	[4,4]
 [17]	[7,4]
 [17]	[14,4]
 [17]	[28,4]
 [17]	[54,4]
 [17]	[106,4]
 [17]	[206,4]
 [17]	[400,4]
 [17]	[1,7]
 [17]	[2,7]
 [17]	[4,7]
 [17]	[7,7]
 [17]	[14,7]
 [17]	[28,7]
 [17]	[54,7]
 [17]	[106,7]
 [17]	[206,7]
 [17]	[400,7]
 [17]	[1,14]
 [17]	[2,14]
 [17]	[4,14]
 [17]	[7,14]
 [17]	[14,14]
 [17]	[28,14]
 [17]	[54,14]
 [17]	[106,14]
 [17]	[206,14]
 [17]	[400,14]
 [17]	[1,28]
 [17]	[2,28]
 [17]	[4,28]
 [17]	[7,28]
 [17]	[14,28]
 [17]	[28,28]
 [17]	[54,28]
 [17]	[106,28]
 [17]	[206,28]
 [17]	[400,28]
 [17]	[1,54]
 [17]	[2,54]
 [17]	[4,54]
 [17]	[7,54]
 [17]	[14,54]
 [17]	[28,54]
 [17]	[54,54]
 [17]	[106,54]
 [17]	[206,54]
 [17]	[400,54]
 [17]	[1,106]
 [17]	[2,106]
 [17]	[4,106]
 [17]	[7,106]
 [17]	[14,106]
 [17]	[28,106]
 [17]	[54,106]
 [17]	[106,106]
 [17]	[206,106]
 [17]	[400,106]
 [17]	[1,206]
 [17]	[2,206]
 [17]	[4,206]
 [17]	[7,206]
 [17]	[14,206]
 [17]	[28,206]
 [17]	[54,206]
 [17]	[106,206]
 [17]	[206,206]
 [17]	[400,206]
 [17]	[1,400]
 [17]	[2,400]
 [17]	[4,400]
 [17]	[7,400]
 [17]	[14,400]
 [17]	[28,400]
 [17]	[54,400]
 [17]	[106,400]
 [17]	[206,400]
 [17]	[400,400]
 [18]	[1,1]
 [18]	[2,1]
 [18]	[4,1]
 [18]	[7,1]
 [18]	[14,1]
 [18]	[28,1]
 [18]	[54,1]
 [18]	[106,1]
 [18]	[206,1]
 [18]	[400,1]
 [18]	[1,2]
 [18]	[2,2]
 [18]	[4,2]
 [18]	[7,2]
 [18]	[14,2]
 [18]	[28,2]
 [18]	[54,2]
 [18]	[106,2]
 [18]	[206,2]
 [18]	[400,2]
 [18]	[1,4]
 [18]	[2,4]
 [18]	[4,4]
 [18]	[7,4]
 [18]	[14,4]
 [18]	[28,4]
 [18]	[54,4]
 [18]	[106,4]
 [18]	[206,4]
 [18]	[400,4]
 [18]	[1,7]
 [18]	[2,7]
 [18]	[4,7]
 [18]	[7,7]
 [18]	[14,7]
 [18]	[28,7]
 [18]	[54,7]
 [18]	[106,7]
 [18]	[206,7]
 [18]	[400,7]
 [18]	[1,14]
 [18]	[2,14]
 [18]	[4,14]
 [18]	[7,14]
 [18]	[14,14]
 [18]	[28,14]
 [18]	[54,14]
 [18]	[106,14]
 [18]	[206,14]
 [18]	[400,14]
 [18]	[1,28]
 [18]	[2,28]
 [18]	[4,28]
 [18]	[7,28]
 [18]	[14,28]
 [18]	[28,28]
 [18]	[54,28]
 [18]	[106,28]
 [18]	[206,28]
 [18]	[400,28]
 [18]	[1,54]
 [18]	[2,54]
 [18]	[4,54]
 [18]	[7,54]
 [18]	[14,54]
 [18]	[28,54]
 [18]	[54,54]
 [18]	[106,54]
 [18]	[206,54]
 [18]	[400,54]
 [18]	[1,106]
 [18]	[2,106]
 [18]	[4,106]
 [18]	[7,106]
 [18]	[14,106]
 [18]	[28,106]
 [18]	[54,106]
 [18]	[106,106]
 [18]	[206,106]
 [18]	[400,106]
 [18]	[1,206]
 [18]	[2,206]
 [18]	[4,206]
 [18]	[7,206]
 [18]	[14,206]
 [18]	[28,206]
 [18]	[54,206]
 [18]	[106,206]
 [18]	[206,206]
 [18]	[400,206]
 [18]	[1,400]
 [18]	[2,400]
 [18]	[4,400]
 [18]	[7,400]
 [18]	[14,400]
 [18]	[28,400]
 [18]	[54,400]
 [18]	[106,400]
 [18]	[206,400]
 [18]	[400,400]
 [19]	[1,1]
 [19]	[2,1]
 [19]	[4,1]
 [19]	[7,1]
 [19]	[14,1]
 [19]	[28,1]
 [19]	[54,1]
 [19]	[106,1]
 [19]	[206,1]
 [19]	[400,1]
 [19]	[1,2]
 [19]	[2,2]
 [19]	[4,2]
 [19]	[7,2]
 [19]	[14,2]
 [19]	[28,2]
 [19]	[54,2]
 [19]	[106,2]
 [19]	[206,2]
 [19]	[400,2]
 [19]	[1,4]
 [19]	[2,4]
 [19]	[4,4]
 [19]	[7,4]
 [19]	[14,4]
 [19]	[28,4]
 [19]	[54,4]
 [19]	[106,4]
 [19]	[206,4]
 [19]	[400,4]
 [19]	[1,7]
 [19]	[2,7]
 [19]	[4,7]
 [19]	[7,7]
 [19]	[14,7]
 [19]	[28,7]
 [19]	[54,7]
 [19]	[106,7]
 [19]	[206,7]
 [19]	[400,7]
 [19]	[1,14]
 [19]	[2,14]
 [19]	[4,14]
 [19]	[7,14]
 [19]	[14,14]
 [19]	[28,14]
 [19]	[54,14]
 [19]	[106,14]
 [19]	[206,14]
 [19]	[400,14]
 [19]	[1,28]
 [19]	[2,28]
 [19]	[4,28]
 [19]	[7,28]
 [19]	[14,28]
 [19]	[28,28]
 [19]	[54,28]
 [19]	[106,28]
 [19]	[206,28]
 [19]	[400,28]
 [19]	[1,54]
 [19]	[2,54]
 [19]	[4,54]
 [19]	[7,54]
 [19]	[14,54]
 [19]	[28,54]
 [19]	[54,54]
 [19]	[106,54]
 [19]	[206,54]
 [19]	[400,54]
 [19]	[1,106]
 [19]	[2,106]
 [19]	[4,106]
 [19]	[7,106]
 [19]	[14,106]
 [19]	[28,106]
 [19]	[54,106]
 [19]	[106,106]
 [19]	[206,106]
 [19]	[400,106]
 [19]	[1,206]
 [19]	[2,206]
 [19]	[4,206]
 [19]	[7,206]
 [19]	[14,206]
 [19]	[28,206]
 [19]	[54,206]
 [19]	[106,206]
 [19]	[206,206]
 [19]	[400,206]
 [19]	[1,400]
 [19]	[2,400]
 [19]	[4,400]
 [19]	[7,400]
 [19]	[14,400]
 [19]	[28,400]
 [19]	[54,400]
 [19]	[106,400]
 [19]	[206,400]
 [19]	[400,400]
 [20]	[1,1]
 [20]	[2,1]
 [20]	[4,1]
 [20]	[7,1]
 [20]	[14,1]
 [20]	[28,1]
 [20]	[54,1]
 [20]	[106,1]
 [20]	[206,1]
 [20]	[400,1]
 [20]	[1,2]
 [20]	[2,2]
 [20]	[4,2]
 [20]	[7,2]
 [20]	[14,2]
 [20]	[28,2]
 [20]	[54,2]
 [20]	[106,2]
 [20]	[206,2]
 [20]	[400,2]
 [20]	[1,4]
 [20]	[2,4]
 [20]	[4,4]
 [20]	[7,4]
 [20]	[14,4]
 [20]	[28,4]
 [20]	[54,4]
 [20]	[106,4]
 [20]	[206,4]
 [20]	[400,4]
 [20]	[1,7]
 [20]	[2,7]
 [20]	[4,7]
 [20]	[7,7]
 [20]	[14,7]
 [20]	[28,7]
 [20]	[54,7]
 [20]	[106,7]
 [20]	[206,7]
 [20]	[400,7]
 [20]	[1,14]
 [20]	[2,14]
 [20]	[4,14]
 [20]	[7,14]
 [20]	[14,14]
 [20]	[28,14]
 [20]	[54,14]
 [20]	[106,14]
 [20]	[206,14]
 [20]	[400,14]
 [20]	[1,28]
 [20]	[2,28]
 [20]	[4,28]
 [20]	[7,28]
 [20]	[14,28]
 [20]	[28,28]
 [20]	[54,28]
 [20]	[106,28]
 [20]	[206,28]
 [20]	[400,28]
 [20]	[1,54]
 [20]	[2,54]
 [20]	[4,54]
 [20]	[7,54]
 [20]	[14,54]
 [20]	[28,54]
 [20]	[54,54]
 [20]	[106,54]
 [20]	[206,54]
 [20]	[400,54]
 [20]	[1,106]
 [20]	[2,106]
 [20]	[4,106]
 [20]	[7,106]
 [20]	[14,106]
 [20]	[28,106]
 [20]	[54,106]
 [20]	[106,106]
 [20]	[206,106]
 [20]	[400,106]
 [20]	[1,206]
 [20]	[2,206]
 [20]	[4,206]
 [20]	[7,206]
 [20]	[14,206]
 [20]	[28,206]
 [20]	[54,206]
 [20]	[106,206]
 [20]	[206,206]
 [20]	[400,206]
 [20]	[1,400]
 [20]	[2,400]
 [20]	[4,400]
 [20]	[7,400]
 [20]	[14,400]
 [20]	[28,400]
 [20]	[54,400]
 [20]	[106,400]
 [20]	[206,400]
 [20]	[400,400]
 [21]	[1,1]
 [21]	[2,1]
 [21]	[4,1]
 [21]	[7,1]
 [21]	[14,1]
 [21]	[28,1]
 [21]	[54,1]
 [21]	[106,1]
 [21]	[206,1]
 [21]	[400,1]
 [21]	[1,2]
 [21]	[2,2]
 [21]	[4,2]
 [21]	[7,2]
 [21]	[14,2]
 [21]	[28,2]
 [21]	[54,2]
 [21]	[106,2]
 [21]	[206,2]
 [21]	[400,2]
 [21]	[1,4]
 [21]	[2,4]
 [21]	[4,4]
 [21]	[7,4]
 [21]	[14,4]
 [21]	[28,4]
 [21]	[54,4]
 [21]	[106,4]
 [21]	[206,4]
 [21]	[400,4]
 [21]	[1,7]
 [21]	[2,7]
 [21]	[4,7]
 [21]	[7,7]
 [21]	[14,7]
 [21]	[28,7]
 [21]	[54,7]
 [21]	[106,7]
 [21]	[206,7]
 [21]	[400,7]
 [21]	[1,14]
 [21]	[2,14]
 [21]	[4,14]
 [21]	[7,14]
 [21]	[14,14]
 [21]	[28,14]
 [21]	[54,14]
 [21]	[106,14]
 [21]	[206,14]
 [21]	[400,14]
 [21]	[1,28]
 [21]	[2,28]
 [21]	[4,28]
 [21]	[7,28]
 [21]	[14,28]
 [21]	[28,28]
 [21]	[54,28]
 [21]	[106,28]
 [21]	[206,28]
 [21]	[400,28]
 [21]	[1,54]
 [21]	[2,54]
 [21]	[4,54]
 [21]	[7,54]
 [21]	[14,54]
 [21]	[28,54]
 [21]	[54,54]
 [21]	[106,54]
 [21]	[206,54]
 [21]	[400,54]
 [21]	[1,106]
 [21]	[2,106]
 [21]	[4,106]
 [21]	[7,106]
 [21]	[14,106]
 [21]	[28,106]
 [21]	[54,106]
 [21]	[106,106]
 [21]	[206,106]
 [21]	[400,106]
 [21]	[1,206]
 [21]	[2,206]
 [21]	[4,206]
 [21]	[7,206]
 [21]	[14,206]
 [21]	[28,206]
 [21]	[54,206]
 [21]	[106,206]
 [21]	[206,206]
 [21]	[400,206]
 [21]	[1,400]
 [21]	[2,400]
 [21]	[4,400]
 [21]	[7,400]
 [21]	[14,400]
 [21]	[28,400]
 [21]	[54,400]
 [21]	[106,400]
 [21]	[206,400]
 [21]	[400,400]
 [22]	[1,1]
 [22]	[2,1]
 [22]	[4,1]
 [22]	[7,1]
 [22]	[14,1]
 [22]	[28,1]
 [22]	[54,1]
 [22]	[106,1]
 [22]	[206,1]
 [22]	[400,1]
 [22]	[1,2]
 [22]	[2,2]
 [22]	[4,2]
 [22]	[7,2]
 [22]	[14,2]
 [22]	[28,2]
 [22]	[54,2]
 [22]	[106,2]
 [22]	[206,2]
 [22]	[400,2]
 [22]	[1,4]
 [22]	[2,4]
 [22]	[4,4]
 [22]	[7,4]
 [22]	[14,4]
 [22]	[28,4]
 [22]	[54,4]
 [22]	[106,4]
 [22]	[206,4]
 [22]	[400,4]
 [22]	[1,7]
 [22]	[2,7]
 [22]	[4,7]
 [22]	[7,7]
 [22]	[14,7]
 [22]	[28,7]
 [22]	[54,7]
 [22]	[106,7]
 [22]	[206,7]
 [22]	[400,7]
 [22]	[1,14]
 [22]	[2,14]
 [22]	[4,14]
 [22]	[7,14]
 [22]	[14,14]
 [22]	[28,14]
 [22]	[54,14]
 [22]	[106,14]
 [22]	[206,14]
 [22]	[400,14]
 [22]	[1,28]
 [22]	[2,28]
 [22]	[4,28]
 [22]	[7,28]
 [22]	[14,28]
 [22]	[28,28]
 [22]	[54,28]
 [22]	[106,28]
 [22]	[206,28]
 [22]	[400,28]
 [22]	[1,54]
 [22]	[2,54]
 [22]	[4,54]
 [22]	[7,54]
 [22]	[14,54]
 [22]	[28,54]
 [22]	[54,54]
 [22]	[106,54]
 [22]	[206,54]
 [22]	[400,54]
 [22]	[1,106]
 [22]	[2,106]
 [22]	[4,106]
 [22]	[7,106]
 [22]	[14,106]
 [22]	[28,106]
 [22]	[54,106]
 [22]	[106,106]
 [22]	[206,106]
 [22]	[400,106]
 [22]	[1,206]
 [22]	[2,206]
 [22]	[4,206]
 [22]	[7,206]
 [22]	[14,206]
 [22]	[28,206]
 [22]	[54,206]
 [22]	[106,206]
 [22]	[206,206]
 [22]	[400,206]
 [22]	[1,400]
 [22]	[2,400]
 [22]	[4,400]
 [22]	[7,400]
 [22]	[14,400]
 [22]	[28,400]
 [22]	[54,400]
 [22]	[106,400]
 [22]	[206,400]
 [22]	[400,400]
 [23]	[1,1]
 [23]	[2,1]
 [23]	[4,1]
 [23]	[7,1]
 [23]	[14,1]
 [23]	[28,1]
 [23]	[54,1]
 [23]	[106,1]
 [23]	[206,1]
 [23]	[400,1]
 [23]	[1,2]
 [23]	[2,2]
 [23]	[4,2]
 [23]	[7,2]
 [23]	[14,2]
 [23]	[28,2]
 [23]	[54,2]
 [23]	[106,2]
 [23]	[206,2]
 [23]	[400,2]
 [23]	[1,4]
 [23]	[2,4]
 [23]	[4,4]
 [23]	[7,4]
 [23]	[14,4]
 [23]	[28,4]
 [23]	[54,4]
 [23]	[106,4]
 [23]	[206,4]
 [23]	[400,4]
 [23]	[1,7]
 [23]	[2,7]
 [23]	[4,7]
 [23]	[7,7]
 [23]	[14,7]
 [23]	[28,7]
 [23]	[54,7]
 [23]	[106,7]
 [23]	[206,7]
 [23]	[400,7]
 [23]	[1,14]
 [23]	[2,14]
 [23]	[4,14]
 [23]	[7,14]
 [23]	[14,14]
 [23]	[28,14]
 [23]	[54,14]
 [23]	[106,14]
 [23]	[206,14]
 [23]	[400,14]
 [23]	[1,28]
 [23]	[2,28]
 [23]	[4,28]
 [23]	[7,28]
 [23]	[14,28]
 [23]	[28,28]
 [23]	[54,28]
 [23]	[106,28]
 [23]	[206,28]
 [23]	[400,28]
 [23]	[1,54]
 [23]	[2,54]
 [23]	[4,54]
 [23]	[7,54]
 [23]	[14,54]
 [23]	[28,54]
 [23]	[54,54]
 [23]	[106,54]
 [23]	[206,54]
 [23]	[400,54]
 [23]	[1,106]
 [23]	[2,106]
 [23]	[4,106]
 [23]	[7,106]
 [23]	[14,106]
 [23]	[28,106]
 [23]	[54,106]
 [23]	[106,106]
 [23]	[206,106]
 [23]	[400,106]
 [23]	[1,206]
 [23]	[2,206]
 [23]	[4,206]
 [23]	[7,206]
 [23]	[14,206]
 [23]	[28,206]
 [23]	[54,206]
 [23]	[106,206]
 [23]	[206,206]
 [23]	[400,206]
 [23]	[1,400]
 [23]	[2,400]
 [23]	[4,400]
 [23]	[7,400]
 [23]	[14,400]
 [23]	[28,400]
 [23]	[54,400]
 [23]	[106,400]
 [23]	[206,400]
 [23]	[400,400]
 [24]	[1,1]
 [24]	[2,1]
 [24]	[4,1]
 [24]	[7,1]
 [24]	[14,1]
 [24]	[28,1]
 [24]	[54,1]
 [24]	[106,1]
 [24]	[206,1]
 [24]	[400,1]
 [24]	[1,2]
 [24]	[2,2]
 [24]	[4,2]
 [24]	[7,2]
 [24]	[14,2]
 [24]	[28,2]
 [24]	[54,2]
 [24]	[106,2]
 [24]	[206,2]
 [24]	[400,2]
 [24]	[1,4]
 [24]	[2,4]
 [24]	[4,4]
 [24]	[7,4]
 [24]	[14,4]
 [24]	[28,4]
 [24]	[54,4]
 [24]	[106,4]
 [24]	[206,4]
 [24]	[400,4]
 [24]	[1,7]
 [24]	[2,7]
 [24]	[4,7]
 [24]	[7,7]
 [24]	[14,7]
 [24]	[28,7]
 [24]	[54,7]
 [24]	[106,7]
 [24]	[206,7]
 [24]	[400,7]
 [24]	[1,14]
 [24]	[2,14]
 [24]	[4,14]
 [24]	[7,14]
 [24]	[14,14]
 [24]	[28,14]
 [24]	[54,14]
 [24]	[106,14]
 [24]	[206,14]
 [24]	[400,14]
 [24]	[1,28]
 [24]	[2,28]
 [24]	[4,28]
 [24]	[7,28]
 [24]	[14,28]
 [24]	[28,28]
 [24]	[54,28]
 [24]	[106,28]
 [24]	[206,28]
 [24]	[400,28]
 [24]	[1,54]
 [24]	[2,54]
 [24]	[4,54]
 [24]	[7,54]
 [24]	[14,54]
 [24]	[28,54]
 [24]	[54,54]
 [24]	[106,54]
 [24]	[206,54]
 [24]	[400,54]
 [24]	[1,106]
 [24]	[2,106]
 [24]	[4,106]
 [24]	[7,106]
 [24]	[14,106]
 [24]	[28,106]
 [24]	[54,106]
 [24]	[106,106]
 [24]	[206,106]
 [24]	[400,106]
 [24]	[1,206]
 [24]	[2,206]
 [24]	[4,206]
 [24]	[7,206]
 [24]	[14,206]
 [24]	[28,206]
 [24]	[54,206]
 [24]	[106,206]
 [24]	[206,206]
 [24]	[400,206]
 [24]	[1,400]
 [24]	[2,400]
 [24]	[4,400]
 [24]	[7,400]
 [24]	[14,400]
 [24]	[28,400]
 [24]	[54,400]
 [24]	[106,400]
 [24]	[206,400]
 [24]	[400,400]
 [25]	[1,1]
 [25]	[2,1]
 [25]	[4,1]
 [25]	[7,1]
 [25]	[14,1]
 [25]	[28,1]
 [25]	[54,1]
 [25]	[106,1]
 [25]	[206,1]
 [25]	[400,1]
 [25]	[1,2]
 [25]	[2,2]
 [25]	[4,2]
 [25]	[7,2]
 [25]	[14,2]
 [25]	[28,2]
 [25]	[54,2]
 [25]	[106,2]
 [25]	[206,2]
 [25]	[400,2]
 [25]	[1,4]
 [25]	[2,4]
 [25]	[4,4]
 [25]	[7,4]
 [25]	[14,4]
 [25]	[28,4]
 [25]	[54,4]
 [25]	[106,4]
 [25]	[206,4]
 [25]	[400,4]
 [25]	[1,7]
 [25]	[2,7]
 [25]	[4,7]
 [25]	[7,7]
 [25]	[14,7]
 [25]	[28,7]
 [25]	[54,7]
 [25]	[106,7]
 [25]	[206,7]
 [25]	[400,7]
 [25]	[1,14]
 [25]	[2,14]
 [25]	[4,14]
 [25]	[7,14]
 [25]	[14,14]
 [25]	[28,14]
 [25]	[54,14]
 [25]	[106,14]
 [25]	[206,14]
 [25]	[400,14]
 [25]	[1,28]
 [25]	[2,28]
 [25]	[4,28]
 [25]	[7,28]
 [25]	[14,28]
 [25]	[28,28]
 [25]	[54,28]
 [25]	[106,28]
 [25]	[206,28]
 [25]	[400,28]
 [25]	[1,54]
 [25]	[2,54]
 [25]	[4,54]
 [25]	[7,54]
 [25]	[14,54]
 [25]	[28,54]
 [25]	[54,54]
 [25]	[106,54]
 [25]	[206,54]
 [25]	[400,54]
 [25]	[1,106]
 [25]	[2,106]
 [25]	[4,106]
 [25]	[7,106]
 [25]	[14,106]
 [25]	[28,106]
 [25]	[54,106]
 [25]	[106,106]
 [25]	[206,106]
 [25]	[400,106]
 [25]	[1,206]
 [25]	[2,206]
 [25]	[4,206]
 [25]	[7,206]
 [25]	[14,206]
 [25]	[28,206]
 [25]	[54,206]
 [25]	[106,206]
 [25]	[206,206]
 [25]	[400,206]
 [25]	[1,400]
 [25]	[2,400]
 [25]	[4,400]
 [25]	[7,400]
 [25]	[14,400]
 [25]	[28,400]
 [25]	[54,400]
 [25]	[106,400]
 [25]	[206,400]
 [25]	[400,400]
> mstop(cvr)
   mu sigma 
  400   400 
> ## set model to optimal values:
> mstop(model) <- mstop(cvr)
> ### END (don't test automatically)
> ## End(No test)
> 
> ### Other grids:
> plot(make.grid(mstop(model), length.out = 3, dense_mu_grid = FALSE))
> plot(make.grid(c(mu = 400, sigma = 400), log = FALSE, dense_mu_grid = FALSE))
> plot(make.grid(c(mu = 400, sigma = 400), length.out = 4,
+                min = 100, log = FALSE, dense_mu_grid = FALSE))
> 
> 
> ### Now use dense mu grids
> # standard grid
> plot(make.grid(c(mu = 100, sigma = 100), dense = FALSE),
+      pch = 20, col = "red")
> # dense grid for all mstop_mu values greater than mstop_sigma
> grid <- make.grid(c(mu = 100, sigma = 100))
> points(grid, pch = 20, cex = 0.2)
> abline(0,1)
> 
> # now with three parameters
> grid <- make.grid(c(mu = 100, sigma = 100, df = 30),
+                   length.out = c(5, 5, 2), dense = FALSE)
> densegrid <- make.grid(c(mu = 100, sigma = 100, df = 30),
+                        length.out = c(5, 5, 2))
> par(mfrow = c(1,2))
> # first for df = 1
> plot(grid[grid$df == 1, 1:2], main = "df = 1", pch = 20, col = "red")
> abline(0,1)
> abline(v = 1)
> # now expand grid for all mu values greater the corresponding sigma
> # value (i.e. below the bisecting line) and above df (i.e. 1)
> points(densegrid[densegrid$df == 1, 1:2], pch = 20, cex = 0.2)
> 
> # now for df = 30
> plot(grid[grid$df == 30, 1:2], main = "df = 30", pch = 20, col = "red")
> abline(0,1)
> abline(v = 30)
> # now expand grid for all mu values greater the corresponding sigma
> # value (i.e. below the bisecting line) and above df (i.e. 30)
> points(densegrid[densegrid$df == 30, 1:2], pch = 20, cex = 0.2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cvrisk", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("families")
> ### * families
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Families
> ### Title: Families for GAMLSS models
> ### Aliases: Families families GaussianLSS GaussianMu GaussianSigma
> ###   GammaLSS GammaMu GammaSigma BetaLSS BetaMu BetaPhi NBinomialLSS
> ###   NBinomialMu NBinomialSigma StudentTLSS StudentTMu StudentTSigma
> ###   StudentTDf LogNormalLSS LogNormalMu LogNormalSigma WeibullLSS
> ###   WeibullMu WeibullSigma LogLogLSS LogLogMu LogLogSigma ZIPoLSS ZINBLSS
> ###   DirichletAlpha DirichletLSS options stab_ngrad stabilize_ngrad
> ###   stabilize_ngradient
> ### Keywords: models distributions
> 
> ### ** Examples
> 
> ## Example to define a new distribution:
> ## Students t-distribution with two parameters, df and mu:
> 
> ## sub-Family for mu
> ## -> generate object of the class family from the package mboost
> newStudentTMu  <- function(mu, df){
+ 
+     # loss is negative log-Likelihood, f is the parameter to be fitted with
+     # id link -> f = mu
+     loss <- function(df,  y, f) {
+         -1 * (lgamma((df + 1)/2)  - lgamma(1/2) -
+               lgamma(df/2) - 0.5 * log(df) -
+               (df + 1)/2 * log(1 + (y - f)^2/(df )))
+     }
+     # risk is sum of loss
+     risk <- function(y, f, w = 1) {
+         sum(w * loss(y = y, f = f, df = df))
+     }
+     # ngradient is the negative derivate w.r.t. mu (=f)
+     ngradient <- function(y, f, w = 1) {
+         (df + 1) * (y - f)/(df  + (y - f)^2)
+     }
+ 
+     # use the Family constructor of mboost
+     mboost::Family(ngradient = ngradient, risk = risk, loss = loss,
+                    response = function(f) f,
+                    name = "new Student's t-distribution: mu (id link)")
+ }
> 
> ## sub-Family for df
> newStudentTDf <- function(mu, df){
+ 
+     # loss is negative log-Likelihood, f is the parameter to be fitted with
+     # log-link: exp(f) = df
+     loss <- function( mu, y, f) {
+         -1 * (lgamma((exp(f) + 1)/2)  - lgamma(1/2) -
+               lgamma(exp(f)/2) - 0.5 * f -
+               (exp(f) + 1)/2 * log(1 + (y - mu)^2/(exp(f) )))
+     }
+     # risk is sum of loss
+     risk <- function(y, f, w = 1) {
+         sum(w * loss(y = y, f = f,  mu = mu))
+     }
+     # ngradient is the negative derivate of the loss w.r.t. f
+     # in this case, just the derivative of the log-likelihood 
+     ngradient <- function(y, f, w = 1) {
+         exp(f)/2 * (digamma((exp(f) + 1)/2) - digamma(exp(f)/2)) -
+             0.5 - (exp(f)/2 * log(1 + (y - mu)^2 / (exp(f) )) -
+                    (y - mu)^2 / (1 + (y - mu)^2 / exp(f)) * (exp(-f) + 1)/2)
+     }
+     # use the Family constructor of mboost
+     mboost::Family(ngradient = ngradient, risk = risk, loss = loss,
+                    response = function(f) exp(f),
+                    name = "Student's t-distribution: df (log link)")
+ }
> 
> ## families object for new distribution
> newStudentT <- Families(mu= newStudentTMu(mu=mu, df=df),
+                         df=newStudentTDf(mu=mu, df=df))
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### usage of the new Student's t distribution:
> library(gamlss)   ## required for rTF
Loading required package: splines
Loading required package: gamlss.data

Attaching package: 'gamlss.data'

The following object is masked from 'package:datasets':

    sleep

Loading required package: gamlss.dist

Attaching package: 'gamlss.dist'

The following object is masked from 'package:mboost':

    Family

Loading required package: nlme
 **********   GAMLSS Version 5.4-22  ********** 
For more on GAMLSS look at https://www.gamlss.com/
Type gamlssNews() to see new features/changes/bug fixes.

> set.seed(1907)
> n <- 5000
> x1  <- runif(n)
> x2 <- runif(n)
> mu <- 2 -1*x1 - 3*x2
> df <- exp(1 + 0.5*x1 )
> y <- rTF(n = n, mu = mu, nu = df)
> 
> ## model fitting
> model <- glmboostLSS(y ~ x1 + x2, families = newStudentT,
+                      control = boost_control(mstop = 100),
+                      center = TRUE)
> ## shrinked effect estimates
> coef(model, off2int = TRUE)
$mu
(Intercept)          x1          x2 
  2.0008585  -0.9741958  -2.9981362 

$df
(Intercept)          x1 
   1.085018    0.103676 

> 
> ## compare to pre-defined three parametric t-distribution:
> model2 <- glmboostLSS(y ~ x1 + x2, families = StudentTLSS(),
+                       control = boost_control(mstop = 100),
+                       center = TRUE)
> coef(model2, off2int = TRUE)
$mu
(Intercept)          x1          x2 
  1.9900788  -0.9658828  -2.9889112 

$sigma
(Intercept)          x1          x2 
 0.01314517 -0.02731268  0.03867761 

$df
(Intercept)          x1 
  1.3213044   0.1913091 

> 
> ## with effect on sigma:
> sigma <- 3+ 1*x2
> y <- rTF(n = n, mu = mu, nu = df, sigma=sigma)
> model3 <- glmboostLSS(y ~ x1 + x2, families = StudentTLSS(),
+                       control = boost_control(mstop = 100),
+                       center = TRUE)
> coef(model3, off2int = TRUE)
$mu
(Intercept)          x2 
  0.5625243  -1.1556618 

$sigma
(Intercept)          x1          x2 
 1.17619100 -0.09742086  0.32657481 

$df
(Intercept)          x1          x2 
 1.14269183  0.33422503 -0.02387359 

> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("families", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:gamlss', 'package:nlme', 'package:gamlss.dist',
  'package:gamlss.data', 'package:splines'

> nameEx("gamboostLSS-package")
> ### * gamboostLSS-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gamboostLSS-package
> ### Title: Boosting algorithms for GAMLSS
> ### Aliases: gamboostLSS-package
> ### Keywords: package
> 
> ### ** Examples
> 
> # Generate covariates
> x1 <- runif(100)
> x2 <- runif(100)
> eta_mu <-     2 - 2*x1
> eta_sigma <-  -1  + 2*x2
> 
> # Generate response: Negative Binomial Distribution
> y <- numeric(100)
> for( i in 1:100)  y[i] <- rnbinom(1, size=exp(eta_sigma[i]), mu=exp(eta_mu[i]))
> 
> # Model fitting, 300 boosting steps, same formula for both distribution parameters
> mod1 <- glmboostLSS( y ~ x1 + x2, families=NBinomialLSS(),
+         control=boost_control(mstop=300), center = TRUE)
> 
> # Shrinked effect estimates
> coef(mod1, off2int=TRUE)
$mu
(Intercept)          x1          x2 
  2.3629274  -1.7170135  -0.7735303 

$sigma
(Intercept)          x1          x2 
 -0.3578293  -0.7798073   1.8236518 

> 
> # Empirical risk with respect to mu
> plot(risk(mod1)$mu)
> 
> # Empirical risk with respect to sigma
> plot(risk(mod1)$sigma)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gamboostLSS-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("india")
> ### * india
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: india
> ### Title: Malnutrition of Children in India (DHS, 1998-99)
> ### Aliases: india india.bnd
> ### Keywords: datasets
> 
> ### ** Examples
> 
> if (require("BayesX")) {
+   ## plot distribution of stunting in India
+   drawmap(india, map = india.bnd, regionvar = "mcdist", plotvar = "stunting")
+ }
Loading required package: BayesX
Loading required package: shapefiles
Loading required package: foreign

Attaching package: 'shapefiles'

The following objects are masked from 'package:foreign':

    read.dbf, write.dbf

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("india", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:BayesX', 'package:shapefiles', 'package:foreign'

> nameEx("mboostLSS")
> ### * mboostLSS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mboostLSS
> ### Title: Fitting GAMLSS by Boosting
> ### Aliases: mboostLSS blackboostLSS glmboostLSS gamboostLSS mboostLSS_fit
> ### Keywords: models nonlinear fitting
> 
> ### ** Examples
> 
> 
> ### Data generating process:
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 +1 * x1 +0.5 * x2 -0.5 * x3 -1 * x4)
> sigma <- exp(-0.4 * x3 -0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ### linear model with y ~ . for both components: 400 boosting iterations
> model <- glmboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 400),
+                      center = TRUE)
> coef(model, off2int = TRUE)
$mu
(Intercept)          x1          x2          x3          x4 
  1.6393421   0.9521780   0.4673261  -0.4553980  -0.8812656 

$sigma
(Intercept)          x1          x2          x3          x4          x5 
-0.21020051  0.18090759  0.03140974 -0.36216484 -0.27645489  0.13696242 
         x6 
 0.32951815 

> 
> 
> ### estimate model with different formulas for mu and sigma:
> names(NBinomialLSS())      # names of the family
[1] "mu"    "sigma"
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> # Note: Multiple formulas must be specified via a _named list_
> #       where the names correspond to the names of the distribution parameters
> #       in the family (see above)
> model2 <- glmboostLSS(formula = list(mu = y ~ x1 + x2 + x3 + x4,
+                                     sigma = y ~ x3 + x4 + x5 + x6),
+                      families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 400, trace = TRUE),
+                      center = TRUE)
[   1] ........................................ -- risk: 3102.966 
[  41] ........................................ -- risk: 3026.774 
[  81] ........................................ -- risk: 2963.095 
[ 121] ........................................ -- risk: 2901.378 
[ 161] ........................................ -- risk: 2841.725 
[ 201] ........................................ -- risk: 2788.547 
[ 241] ........................................ -- risk: 2746.665 
[ 281] ........................................ -- risk: 2717.919 
[ 321] ........................................ -- risk: 2700.384 
[ 361] .......................................
Final risk: 2690.598 
> coef(model2, off2int = TRUE)
$mu
(Intercept)          x1          x2          x3          x4 
  1.6068970   0.9754679   0.4773532  -0.4662399  -0.8897124 

$sigma
(Intercept)          x3          x4          x5          x6 
 -0.1230354  -0.3630657  -0.2697535   0.1403489   0.3301615 

> ### END (don't test automatically)
> ## End(No test)
> 
> 
> ### Offset needs to be specified via the arguments of families object:
> model <- glmboostLSS(y ~ ., data = dat,
+                      families = NBinomialLSS(mu = mean(mu),
+                                              sigma = mean(sigma)),
+                      control = boost_control(mstop = 10),
+                      center = TRUE)
> # Note: mu-offset = log(mean(mu)) and sigma-offset = log(mean(sigma))
> #       as we use a log-link in both families
> coef(model)
$mu
(Intercept)          x1          x4 
-0.00644371  0.32790393 -0.22505852 
attr(,"offset")
[1] 2.843104

$sigma
(Intercept) 
 -0.6069266 
attr(,"offset")
[1] 0.1828927

> log(mean(mu))
[1] 2.843104
> log(mean(sigma))
[1] 0.1828927
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### use different mstop values for the two distribution parameters
> ### (two-dimensional early stopping)
> ### the number of iterations is passed to boost_control via a named list
> model3 <- glmboostLSS(formula = list(mu = y ~ x1 + x2 + x3 + x4,
+                                     sigma = y ~ x3 + x4 + x5 + x6),
+                      families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = list(mu = 400,
+                                                           sigma = 300),
+                                              trace  = TRUE),
+                      center = TRUE)
[   1] ........................................ -- risk: 3102.966 
[  41] ........................................ -- risk: 3026.774 
[  81] ........................................ -- risk: 2963.095 
[ 121] ........................................ -- risk: 2901.378 
[ 161] ........................................ -- risk: 2841.725 
[ 201] ........................................ -- risk: 2788.547 
[ 241] ........................................ -- risk: 2746.665 
[ 281] ........................................ -- risk: 2721.225 
[ 321] ........................................ -- risk: 2709.597 
[ 361] .......................................
Final risk: 2703.712 
> coef(model3, off2int = TRUE)
$mu
(Intercept)          x1          x2          x3          x4 
  1.6111180   0.9718734   0.4694390  -0.4644485  -0.8799773 

$sigma
(Intercept)          x3          x4          x5          x6 
-0.29089309 -0.36306567 -0.26975349  0.06302647  0.23897680 

> 
> ### Alternatively we can change mstop of model2:
> # here it is assumed that the first element in the vector corresponds to
> # the first distribution parameter of model2 etc.
> mstop(model2) <- c(400, 300)
Model first reduced to mstop = 300.
Now continue ...
[ 301] ........................................ -- risk: 2714.448 
[ 341] ........................................ -- risk: 2706.16 
[ 381] ...................
Final risk: 2703.712 
> par(mfrow = c(1,2))
> plot(model2, xlim = c(0, max(mstop(model2))))
> ## all.equal(coef(model2), coef(model3)) # same!
> ### END (don't test automatically)
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mboostLSS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("methods")
> ### * methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: methods
> ### Title: Methods for mboostLSS
> ### Aliases: print.mboostLSS summary.mboostLSS coef.mboostLSS
> ###   coef.glmboostLSS risk risk.mboostLSS risk.nc_mboostLSS [.mboostLSS
> ###   mstop.mboostLSS mstop.oobag mstop.cvriskLSS selected
> ###   selected.mboostLSS fitted.mboostLSS predict.mboostLSS predint PI
> ###   plot.glmboostLSS plot.gamboostLSS plot.predint update.mboostLSS
> ###   model.weights model.weights.default model.weights.mboostLSS
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> ### generate data
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 + x1^2 +0.5 * x2 - 3 * sin(x3) -1 * x4)
> sigma <- exp(-0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ### fit a model
> model <- gamboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 100))
> 
> ## No test: 
> ### Do not test the following line per default on CRAN as it takes some time to run:
> ### use a model with more iterations for a better fit
> mstop(model) <- 400
> ## End(No test)
> ### extract coefficients
> coef(model)
$mu
$mu$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 3.58171162  2.47642528  1.38321574  0.35846956 -0.55844452 -1.37386807 
          7           8           9          10          11          12 
-2.06458716 -2.59383114 -2.94780874 -3.13830905 -3.18456718 -3.09471614 
         13          14          15          16          17          18 
-2.86320002 -2.46725583 -1.87824932 -1.08842598 -0.09273069  1.10805069 
         19          20          21          22          23          24 
 2.48864871  4.00437954  5.60292639  7.22757826  8.84770033 10.46670890 

$mu$`bbs(x2, df = dfbase)`
           1            2            3            4            5            6 
-0.587566961 -0.597235438 -0.606895315 -0.616493787 -0.625795231 -0.634226137 
           7            8            9           10           11           12 
-0.640764125 -0.643706510 -0.640665090 -0.629114203 -0.606465895 -0.565608623 
          13           14           15           16           17           18 
-0.499359395 -0.406250945 -0.289077228 -0.151094925 -0.001816152  0.145180803 
          19           20           21           22           23           24 
 0.286945793  0.419084257  0.545588471  0.669020129  0.789859923  0.910388845 

$mu$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
 0.56795279  0.55780416  0.54748657  0.53585633  0.51985238  0.49117080 
          7           8           9          10          11          12 
 0.42717983  0.28842831  0.05046407 -0.25478976 -0.54504699 -0.75532086 
         13          14          15          16          17          18 
-0.86898076 -0.89962650 -0.87265489 -0.81495211 -0.74603752 -0.67649673 
         19          20          21          22          23          24 
-0.61055475 -0.54837543 -0.48890118 -0.43106752 -0.37389396 -0.31679224 

$mu$`bbs(x4, df = dfbase)`
           1            2            3            4            5            6 
 2.567451548  2.183750849  1.800221522  1.415979619  1.034193925  0.667283581 
           7            8            9           10           11           12 
 0.322037908  0.009307946 -0.257545406 -0.481058697 -0.669711726 -0.813301919 
          13           14           15           16           17           18 
-0.899364077 -0.932976649 -0.928286937 -0.899491998 -0.856040250 -0.804129860 
          19           20           21           22           23           24 
-0.747632886 -0.688917495 -0.629440068 -0.569818848 -0.510251322 -0.450694818 

attr(,"offset")
[1] 8.987845

$sigma
$sigma$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 0.89659896  0.78713827  0.67616363  0.55710972  0.42730640  0.29198964 
          7           8           9          10          11          12 
 0.16213561  0.05105498 -0.03122624 -0.07636369 -0.07847081 -0.03347976 
         13          14          15          16          17          18 
 0.05806291  0.17903228  0.30635652  0.42810623  0.53761730  0.62881005 
         19          20          21          22          23          24 
 0.69997372  0.75391423  0.79637618  0.83506332  0.87429121  0.91365882 

$sigma$`bbs(x2, df = dfbase)`
           1            2            3            4            5            6 
-0.563658099 -0.511757633 -0.459777813 -0.407331656 -0.354135637 -0.300469789 
           7            8            9           10           11           12 
-0.248309054 -0.199527201 -0.154491031 -0.108894041 -0.058401176 -0.002441743 
          13           14           15           16           17           18 
 0.056485634  0.113495347  0.164241665  0.204929797  0.235290786  0.264020512 
          19           20           21           22           23           24 
 0.296512364  0.333895129  0.373456411  0.413559910  0.453779449  0.494022650 

$sigma$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
-0.06993610  0.21499857  0.50028300  0.78648039  1.06468530  1.31096129 
          7           8           9          10          11          12 
 1.49064676  1.57871831  1.56759726  1.44135824  1.19071517  0.83344538 
         13          14          15          16          17          18 
 0.42510439  0.03477714 -0.30056403 -0.55740737 -0.72441644 -0.78900239 
         19          20          21          22          23          24 
-0.75566343 -0.65077256 -0.49956584 -0.32729937 -0.14808085  0.03192020 

$sigma$`bbs(x4, df = dfbase)`
          1           2           3           4           5           6 
 0.96287396  0.92067646  0.87872610  0.83856811  0.80135246  0.76642933 
          7           8           9          10          11          12 
 0.73502975  0.69991233  0.65251689  0.58964226  0.51238783  0.41489277 
         13          14          15          16          17          18 
 0.29149880  0.14358469 -0.01622096 -0.18308842 -0.36174266 -0.55165256 
         19          20          21          22          23          24 
-0.75216843 -0.96121405 -1.17697567 -1.39582787 -1.61463882 -1.83317154 

$sigma$`bbs(x5, df = dfbase)`
          1           2           3           4           5           6 
-0.35133403 -0.31818178 -0.28487218 -0.25048316 -0.21414473 -0.17551639 
          7           8           9          10          11          12 
-0.13478066 -0.09043638 -0.04036516  0.01140995  0.05490235  0.08804386 
         13          14          15          16          17          18 
 0.11539467  0.13861908  0.15950497  0.17917571  0.19811973  0.21841061 
         19          20          21          22          23          24 
 0.23971873  0.26186475  0.28466757  0.30781905  0.33074669  0.35356978 

$sigma$`bbs(x6, df = dfbase)`
            1             2             3             4             5 
-0.2844651853 -0.2186158339 -0.1534117873 -0.0928846920 -0.0448736963 
            6             7             8             9            10 
-0.0144611085 -0.0007836771  0.0043527916  0.0116311680  0.0272086216 
           11            12            13            14            15 
 0.0517831842  0.0848199149  0.1248441156  0.1671483825  0.2026641218 
           16            17            18            19            20 
 0.2336020577  0.2661041203  0.3023380949  0.3417998164  0.3836024171 
           21            22            23            24 
 0.4268453784  0.4711745744  0.5160781740  0.5610762032 

attr(,"offset")
[1] -2.427222

> 
> ### only for distribution parameter mu
> coef(model, parameter = "mu")
$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 3.58171162  2.47642528  1.38321574  0.35846956 -0.55844452 -1.37386807 
          7           8           9          10          11          12 
-2.06458716 -2.59383114 -2.94780874 -3.13830905 -3.18456718 -3.09471614 
         13          14          15          16          17          18 
-2.86320002 -2.46725583 -1.87824932 -1.08842598 -0.09273069  1.10805069 
         19          20          21          22          23          24 
 2.48864871  4.00437954  5.60292639  7.22757826  8.84770033 10.46670890 

$`bbs(x2, df = dfbase)`
           1            2            3            4            5            6 
-0.587566961 -0.597235438 -0.606895315 -0.616493787 -0.625795231 -0.634226137 
           7            8            9           10           11           12 
-0.640764125 -0.643706510 -0.640665090 -0.629114203 -0.606465895 -0.565608623 
          13           14           15           16           17           18 
-0.499359395 -0.406250945 -0.289077228 -0.151094925 -0.001816152  0.145180803 
          19           20           21           22           23           24 
 0.286945793  0.419084257  0.545588471  0.669020129  0.789859923  0.910388845 

$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
 0.56795279  0.55780416  0.54748657  0.53585633  0.51985238  0.49117080 
          7           8           9          10          11          12 
 0.42717983  0.28842831  0.05046407 -0.25478976 -0.54504699 -0.75532086 
         13          14          15          16          17          18 
-0.86898076 -0.89962650 -0.87265489 -0.81495211 -0.74603752 -0.67649673 
         19          20          21          22          23          24 
-0.61055475 -0.54837543 -0.48890118 -0.43106752 -0.37389396 -0.31679224 

$`bbs(x4, df = dfbase)`
           1            2            3            4            5            6 
 2.567451548  2.183750849  1.800221522  1.415979619  1.034193925  0.667283581 
           7            8            9           10           11           12 
 0.322037908  0.009307946 -0.257545406 -0.481058697 -0.669711726 -0.813301919 
          13           14           15           16           17           18 
-0.899364077 -0.932976649 -0.928286937 -0.899491998 -0.856040250 -0.804129860 
          19           20           21           22           23           24 
-0.747632886 -0.688917495 -0.629440068 -0.569818848 -0.510251322 -0.450694818 

attr(,"offset")
[1] 8.987845
> 
> ### only for covariate x1
> coef(model, which = "x1")
$mu
$mu$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 3.58171162  2.47642528  1.38321574  0.35846956 -0.55844452 -1.37386807 
          7           8           9          10          11          12 
-2.06458716 -2.59383114 -2.94780874 -3.13830905 -3.18456718 -3.09471614 
         13          14          15          16          17          18 
-2.86320002 -2.46725583 -1.87824932 -1.08842598 -0.09273069  1.10805069 
         19          20          21          22          23          24 
 2.48864871  4.00437954  5.60292639  7.22757826  8.84770033 10.46670890 

attr(,"offset")
[1] 8.987845

$sigma
$sigma$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 0.89659896  0.78713827  0.67616363  0.55710972  0.42730640  0.29198964 
          7           8           9          10          11          12 
 0.16213561  0.05105498 -0.03122624 -0.07636369 -0.07847081 -0.03347976 
         13          14          15          16          17          18 
 0.05806291  0.17903228  0.30635652  0.42810623  0.53761730  0.62881005 
         19          20          21          22          23          24 
 0.69997372  0.75391423  0.79637618  0.83506332  0.87429121  0.91365882 

attr(,"offset")
[1] -2.427222

> 
> 
> ### plot complete model
> par(mfrow = c(4, 3))
> plot(model)
> ### plot first parameter only
> par(mfrow = c(2, 3))
> plot(model, parameter = "mu")
> ### now plot only effect of x3 of both parameters
> par(mfrow = c(1, 2))
> plot(model, which = "x3")
> ### first component second parameter (sigma)
> par(mfrow = c(1, 1))
> plot(model, which = 1, parameter = 2)
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### plot marginal prediction interval
> pi <- predint(model, pi = 0.9, which = "x1")
> pi <- predint(model, pi = c(0.8, 0.9), which = "x1")
> plot(pi, log = "y")  # warning as some y values are below 0
Warning in xy.coords(x, y, xlabel, ylabel, log) :
  229 y values <= 0 omitted from logarithmic plot
> ## here it would be better to plot x1 against
> ## sqrt(y) and sqrt(pi)
> 
> ### set model to mstop = 300 (one-dimensional)
> mstop(model) <- 300
> ### END (don't test automatically)
> ## End(No test)
> 
> par(mfrow = c(2, 2))
> plot(risk(model, parameter = "mu")[[1]])
> plot(risk(model, parameter = "sigma")[[1]])
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> ### get back to orignal fit
> mstop(model) <- 400
> plot(risk(model, parameter = "mu")[[1]])
> plot(risk(model, parameter = "sigma")[[1]])
> 
> ### use different mstop values for the components
> mstop(model) <- c(100, 200)
> ## same as
>   mstop(model) <- c(mu = 100, sigma = 200)
> ## or
>   mstop(model) <- list(mu = 100, sigma = 200)
> ## or
>   mstop(model) <- list(100, 200)
> 
> plot(risk(model, parameter = "mu")[[1]])
> plot(risk(model, parameter = "sigma")[[1]])
> ### END (don't test automatically)
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("stabsel.mboostLSS")
> ### * stabsel.mboostLSS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stabsel
> ### Title: Stability Selection
> ### Aliases: stabsel.mboostLSS selected.stabsel_mboostLSS
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
> 
> ### Data generating process:
> set.seed(1907)
> x1 <- rnorm(500)
> x2 <- rnorm(500)
> x3 <- rnorm(500)
> x4 <- rnorm(500)
> x5 <- rnorm(500)
> x6 <- rnorm(500)
> mu    <- exp(1.5 +1 * x1 +0.5 * x2 -0.5 * x3 -1 * x4)
> sigma <- exp(-0.4 * x3 -0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(500)
> for( i in 1:500)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ### linear model with y ~ . for both components: 400 boosting iterations
> model <- glmboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 400),
+                      center = TRUE, method = "noncyclic")
> 
> ## No test: 
> ### Do not test the following code per default on CRAN as it takes some time to run:
> 
> #run stability selection 
> (s <- stabsel(model, q = 5, PFER = 1))
Run stabsel ....................................................................................................
	Stability Selection with unimodality assumption

Selected variables:
x1.mu x4.mu 
    2     5 

Selection probabilities:
   (Intercept).mu             x5.mu             x6.mu          x6.sigma 
             0.00              0.00              0.00              0.00 
            x2.mu             x3.mu (Intercept).sigma          x5.sigma 
             0.01              0.03              0.06              0.08 
         x2.sigma          x4.sigma          x1.sigma          x3.sigma 
             0.70              0.70              0.71              0.71 
            x1.mu             x4.mu 
             1.00              1.00 

---
Cutoff: 0.87; q: 5; PFER (*):  0.98 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1 
PFER corresponds to signif. level 0.07 (without multiplicity adjustment)

> #get selected effects
> selected(s)
$mu
x1.mu x4.mu 
    2     5 

$sigma
named numeric(0)

> 
> #visualize selection frequencies 
> plot(s)
> 
> ### END (don't test automatically)
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stabsel.mboostLSS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weighted_median")
> ### * weighted_median
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weighted.median
> ### Title: Weighted Median
> ### Aliases: weighted.median
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> ## compute the weighted median with case weights
> x <- c(1, 2, 3, 4)
> w <- c(0, 1, 2, 3)
> weighted.median(x, w)
[1] 3.5
> 
> ## compute the weighted median with arbitrary weights
> x <- rnorm(100)
> w <- runif(100)
> weighted.median(x, w)
[1] 0.1532533
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weighted_median", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  398.39 2.44 403.75 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
